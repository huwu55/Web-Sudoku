{"version":3,"sources":["sudokuGenerator.js","components/Grid/Grid.js","components/Grid/InputOptions.js","components/GameBoard.js","App.js","index.js"],"names":["generateThreeRows","seed","result","i","currentRow","length","row","j","push","generateMatrix","n","index","Math","floor","random","splice","generateSeed","matrix","lastSeed","Object","toConsumableArray","currentSeed","temp","shift","concat","section","mixRows","m","orders","randomOrder","generateSolvedSudoku","flipMatrix","Grid","props","cellstyle","active","conflicts","react_default","a","createElement","className","prefilled","key","column","onClick","toggleClass","digit","guess","InputOptions","inputNumClass","currentActive","id","map","handleInputNum","GameBoard","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cell","sudoku","state","setState","removeNumbers","num_prefilled","handleInputNumClick","inputNum","checkConflict","handleInputKeyPress","event","keyCode","parseInt","String","fromCharCode","updateConflicts","currentGrid","conflictPosition","objectSpread","conflictList","checkRowConflicts","c","checkColumnConflicts","r","checkNonetConflicts","startRow","startColumn","_this$checkRowConflic","_this$checkColumnConf","_this$checkNonetConfl","sudokuGenerator","document","addEventListener","removeEventListener","_this2","React","Component","Sudoku","components_GameBoard","ReactDOM","render","App","getElementById"],"mappings":"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","file":"static/js/main.bb08366f.chunk.js","sourcesContent":["function generateSeed(){\r\n    let n = [1,2,3,4,5,6,7,8,9];\r\n    let seed = [];\r\n\r\n    while(n.length > 1){\r\n        let index = Math.floor(Math.random()*n.length);\r\n        seed.push(n[index]);\r\n        n.splice(index, 1);\r\n    }\r\n\r\n    seed.push(n[0]);\r\n\r\n    return seed;\r\n}\r\n\r\nfunction generateThreeRows(seed){\r\n    let result = [seed];\r\n    for(let i = 0; i < 2; i++){\r\n        let currentRow = result[result.length - 1];\r\n        let row = [];\r\n\r\n        for(let j = 0; j < 9; j = j+3){\r\n            if(j <= 5){\r\n                row.push(currentRow[j + 3]);\r\n                row.push(currentRow[j + 4]);\r\n                row.push(currentRow[j + 5]);\r\n            }\r\n            else{\r\n                row.push(currentRow[0]);\r\n                row.push(currentRow[1]);\r\n                row.push(currentRow[2]);\r\n            }\r\n        }\r\n        result.push(row);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction generateMatrix(){\r\n    let seed = generateSeed();    \r\n    let matrix = [];\r\n\r\n    let lastSeed = [...seed];\r\n    let currentSeed = [...seed];\r\n    for(let i = 0; i < 3; i++){\r\n        if(i > 0){\r\n            let temp = [...lastSeed];\r\n            temp.shift();\r\n            currentSeed = [...temp, lastSeed[0]];\r\n        }\r\n\r\n        let section = generateThreeRows(currentSeed);\r\n        matrix.push(section[0], section[1], section[2]);\r\n        lastSeed = [...currentSeed];\r\n    }\r\n\r\n    return matrix;\r\n}\r\n\r\nfunction mixRows(m){\r\n    let result = [];\r\n    let orders = [\r\n        [0,1,2],\r\n        [0,2,1],\r\n        [1,0,2],\r\n        [1,2,0],\r\n        [2,0,1],\r\n        [2,1,0]\r\n    ];\r\n\r\n    for(let i = 0; i < 9; i+=3){\r\n        let randomOrder = orders[Math.floor(Math.random()*orders.length)];\r\n\r\n        result.push(m[i + randomOrder[0]]);\r\n        result.push(m[i + randomOrder[1]]);\r\n        result.push(m[i + randomOrder[2]]);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction flipMatrix(m){\r\n    let result = [];\r\n    for(let i = 0; i < 9; i++){\r\n        let row = [];\r\n\r\n        for(let j = 0; j < 9; j++){\r\n            row.push(m[j][i]);\r\n        }\r\n        result.push(row);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction generateSolvedSudoku(){\r\n    let matrix = generateMatrix();\r\n    // console.log(\"Original Matrix:\\n\",matrix);\r\n\r\n    matrix = mixRows(matrix);\r\n    // console.log(\"Mixed Rows Matrix:\\n\",matrix);\r\n\r\n    matrix = flipMatrix(matrix);\r\n    // console.log(\"Flipped Matrix:\\n\",matrix);\r\n\r\n    matrix = mixRows(matrix);\r\n    // console.log(\"Mixed Rows Again Matrix:\\n\",matrix);\r\n\r\n    return matrix;\r\n}\r\n\r\nexport default generateSolvedSudoku;\r\n","import React from \"react\";\r\n\r\nexport default (props)=>{\r\n    let cellstyle = 'cell';\r\n\r\n    if(props.n.active)\r\n        cellstyle+=' active';\r\n\r\n    if(props.n.conflicts.length !== 0)\r\n        cellstyle+=' conflict';\r\n    \r\n    return(\r\n        <td className={props.n.prefilled ? 'inactive' : ''} key={`${props.n.row}${props.n.column}`}>\r\n            <div className={cellstyle} onClick={()=>props.toggleClass(props.n)}>\r\n                {props.n.prefilled && props.n.digit}\r\n                {props.n.guess!==0 && props.n.guess}\r\n            </div>\r\n        </td>\r\n    );\r\n};","import React from \"react\";\r\n\r\nexport default (props) => {\r\n    let inputNumClass = 'inputNum';\r\n\r\n    if(props.currentActive.row === -1)\r\n        inputNumClass += \" inactive\";\r\n\r\n    let inputNums = [1,2,3,4,5,6,7,8,9];\r\n    \r\n    return (\r\n        <div id=\"inputOptions\">\r\n            {inputNums.map(n=>(\r\n                <div key={n} \r\n                    className={props.guess===n ? `${inputNumClass} entered` : inputNumClass} \r\n                    onClick={()=>props.handleInputNum(n)}>\r\n                    {n}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport sudokuGenerator from '../sudokuGenerator';\r\nimport Grid from \"./Grid/Grid\";\r\nimport InputOptions from './Grid/InputOptions';\r\n\r\n\r\nclass GameBoard extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        let solvedSudoku = sudokuGenerator();\r\n        let sudoku = solvedSudoku.map((row, r)=>{\r\n            return row.map((n, c)=>{\r\n                return {\r\n                    digit: n,\r\n                    guess: 0,\r\n                    prefilled: true,\r\n                    conflicts: [],\r\n                    active: false,\r\n                    row: r,\r\n                    column: c\r\n                };\r\n            });\r\n        });\r\n\r\n        sudoku = this.removeNumbers(sudoku);\r\n\r\n        this.state = {\r\n            sudoku,\r\n            //currentActive : null\r\n            currentActive : {\r\n                row: -1,\r\n                column: -1\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.addEventListener('keydown', this.handleInputKeyPress);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        document.removeEventListener('keydown', this.handleInputKeyPress);\r\n    }\r\n\r\n    toggleClass = (cell) =>{\r\n        if(cell.prefilled)\r\n            return;\r\n\r\n        let sudoku = [...this.state.sudoku];\r\n        sudoku[cell.row][cell.column].active = true;\r\n\r\n        if(this.state.currentActive.row === -1){\r\n            this.setState({\r\n                currentActive: {row: cell.row, column: cell.column},\r\n                sudoku\r\n            });\r\n        }\r\n        else if(cell.row === this.state.currentActive.row && cell.column === this.state.currentActive.column)\r\n            return;\r\n        else{\r\n            sudoku[this.state.currentActive.row][this.state.currentActive.column].active = false;\r\n            this.setState({\r\n                currentActive: {row: cell.row, column: cell.column},\r\n                sudoku\r\n            });\r\n        }\r\n    }\r\n\r\n    removeNumbers = (sudoku) => {\r\n        // .21\r\n        let num_prefilled = 81;\r\n\r\n        for(let i = 0; i < 9; i++){\r\n            for(let j = 0; j < 9; j++){\r\n                if(num_prefilled > 17 && Math.random() > 0.21){\r\n                    sudoku[i][j].prefilled = false;\r\n                    num_prefilled--;\r\n                }\r\n\r\n                if(num_prefilled <= 17)\r\n                    break;\r\n            }\r\n            if(num_prefilled <= 17)\r\n                break;\r\n        }\r\n\r\n        return sudoku;\r\n    }\r\n\r\n    handleInputNumClick = (inputNum) => {\r\n        if(this.state.currentActive.row === -1)\r\n            return;\r\n\r\n        let sudoku = [...this.state.sudoku];\r\n\r\n        if(sudoku[this.state.currentActive.row][this.state.currentActive.column].guess === inputNum)\r\n            return;\r\n\r\n        sudoku[this.state.currentActive.row][this.state.currentActive.column].guess = inputNum;\r\n\r\n        this.setState({sudoku}, ()=>this.checkConflict());\r\n    }\r\n\r\n    handleInputKeyPress = (event)=>{\r\n        if(this.state.currentActive.row === -1)\r\n            return;\r\n\r\n        if(event.keyCode >= 49 && event.keyCode <= 57){\r\n            let sudoku = [...this.state.sudoku];\r\n            let inputNum = parseInt(String.fromCharCode(event.keyCode));\r\n\r\n            if(sudoku[this.state.currentActive.row][this.state.currentActive.column].guess === inputNum)\r\n                return;\r\n\r\n            sudoku[this.state.currentActive.row][this.state.currentActive.column].guess = inputNum;\r\n            this.setState({sudoku}, ()=>this.checkConflict());\r\n        }\r\n    }\r\n\r\n    updateConflicts = (sudoku, currentActive, currentGrid) => {\r\n        for(let i = 0; i < currentGrid.conflicts.length; i++){\r\n            let conflictPosition = {...currentGrid.conflicts[i]};\r\n            let conflictList = [...sudoku[conflictPosition.row][conflictPosition.column].conflicts];\r\n\r\n            for(let j = 0; j < conflictList.length; j++){\r\n                if(conflictList[j].row === currentActive.row && \r\n                    conflictList[j].column === currentActive.column){\r\n                        conflictList.splice(j,1);\r\n                        sudoku[conflictPosition.row][conflictPosition.column].conflicts = [...conflictList];\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return sudoku;\r\n    }\r\n\r\n    checkRowConflicts = (sudoku, currentActive, currentGrid) => {\r\n        for(let c = 0; c < 9; c++){\r\n            if(c === currentActive.column)\r\n                continue;\r\n\r\n            if((sudoku[currentActive.row][c].prefilled && sudoku[currentActive.row][c].digit === currentGrid.guess) || \r\n                (!sudoku[currentActive.row][c].prefilled && sudoku[currentActive.row][c].guess === currentGrid.guess)){\r\n                    currentGrid.conflicts.push({row:currentActive.row, column:c});\r\n                    sudoku[currentActive.row][c].conflicts.push(currentActive);\r\n                }\r\n        }\r\n\r\n        return {sudoku, currentGrid};\r\n    }\r\n\r\n    checkColumnConflicts = (sudoku, currentActive, currentGrid) => {\r\n        for(let r = 0; r < 9; r++){\r\n            if(r === currentActive.row)\r\n                continue;\r\n\r\n            if((sudoku[r][currentActive.column].prefilled && \r\n                sudoku[r][currentActive.column].digit === currentGrid.guess) || \r\n                (!sudoku[r][currentActive.column].prefilled &&\r\n                    sudoku[r][currentActive.column].guess === currentGrid.guess)){\r\n                    currentGrid.conflicts.push({row: r, column:currentActive.column});\r\n                    sudoku[r][currentActive.column].conflicts.push(currentActive);\r\n                }\r\n        }\r\n\r\n        return {sudoku, currentGrid};\r\n    }\r\n\r\n    checkNonetConflicts = (sudoku, currentActive, currentGrid) => {\r\n        let startRow, startColumn;\r\n\r\n        switch (currentActive.row % 3){\r\n            case 0:\r\n                startRow = currentActive.row;\r\n                break;\r\n            case 1:\r\n                startRow = currentActive.row - 1;\r\n                break;\r\n            case 2:\r\n                startRow = currentActive.row - 2;\r\n                break;\r\n            default:\r\n                startRow = -1;\r\n                break;\r\n        }\r\n\r\n        switch (currentActive.column % 3){\r\n            case 0:\r\n                startColumn = currentActive.column;\r\n                break;\r\n            case 1:\r\n                startColumn = currentActive.column - 1;\r\n                break;\r\n            case 2:\r\n                startColumn = currentActive.column - 2;\r\n                break;\r\n            default:\r\n                startColumn = -1;\r\n                break;\r\n        }\r\n\r\n        for(let r = 0; r < 3; r++){\r\n            for(let c = 0; c < 3; c++){\r\n                let row = startRow + r;\r\n                let column = startColumn + c;\r\n                if(row === currentActive.row || column === currentActive.column)\r\n                    continue;\r\n\r\n                if((sudoku[row][column].prefilled && \r\n                    sudoku[row][column].digit === currentGrid.guess) || \r\n                    (!sudoku[row][column].prefilled &&\r\n                        sudoku[row][column].guess === currentGrid.guess)){\r\n                        currentGrid.conflicts.push({row, column});\r\n                        sudoku[row][column].conflicts.push(currentActive);\r\n                    }\r\n            }\r\n        }\r\n\r\n        return {sudoku, currentGrid};\r\n    }\r\n\r\n    checkConflict = ()=>{\r\n        let sudoku = [...this.state.sudoku];\r\n        let currentActive = {...this.state.currentActive};\r\n        let currentGrid = {...sudoku[currentActive.row][currentActive.column]};\r\n\r\n        sudoku = this.updateConflicts(sudoku, currentActive, currentGrid);\r\n\r\n        // reset conflicts for new input\r\n        currentGrid.conflicts = [];\r\n\r\n        //row\r\n        ({sudoku, currentGrid} = this.checkRowConflicts(sudoku, currentActive, currentGrid));\r\n\r\n        //column\r\n        ({sudoku, currentGrid} = this.checkColumnConflicts(sudoku, currentActive, currentGrid));\r\n\r\n        //nonet\r\n        ({sudoku, currentGrid} = this.checkNonetConflicts(sudoku, currentActive, currentGrid));\r\n\r\n        sudoku[currentActive.row][currentActive.column] = {...currentGrid};\r\n        this.setState({sudoku});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"gameboard\">\r\n                <table>\r\n                    <tbody>\r\n                        {this.state.sudoku.map((row, i)=>(\r\n                            <tr key={i}>\r\n                                {row.map((n)=>(\r\n                                    <Grid \r\n                                        key={`${n.row}${n.column}`} \r\n                                        n={n} \r\n                                        toggleClass={this.toggleClass}\r\n                                    />\r\n                                ))}\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <InputOptions \r\n                    guess={this.state.currentActive.row!==-1 ? \r\n                        this.state.sudoku[this.state.currentActive.row][this.state.currentActive.column].guess : 0}\r\n                    currentActive={this.state.currentActive} \r\n                    handleInputNum={this.handleInputNumClick}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameBoard;","import React from \"react\";\r\n// import sudokuGenerator from './sudokuGenerator';\r\nimport GameBoard from './components/GameBoard';\r\nimport \"./style/style.css\";\r\n\r\n\r\nclass Sudoku extends React.Component {\r\n    constructor(){\r\n        super();\r\n\r\n        // this.state = {\r\n        //     sudoku : []\r\n        // }\r\n    }\r\n\r\n    //componentDidMount(){\r\n    //     let sudoku = sudokuGenerator();\r\n    //     this.setState({sudoku});\r\n    //     console.log(this);\r\n    // }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <GameBoard />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Sudoku;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./style/style.css\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}
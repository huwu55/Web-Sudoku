{"version":3,"sources":["sudokuGenerator.js","components/Grid/Candidates.js","components/Grid/Grid.js","components/Grid/InputOptions.js","components/Toolbar.js","components/GameBoard.js","components/Instruction.js","components/Footer.js","index.js","App.js"],"names":["generateThreeRows","seed","result","i","currentRow","length","row","j","push","generateMatrix","n","index","Math","floor","random","splice","generateSeed","matrix","lastSeed","Object","toConsumableArray","currentSeed","temp","shift","concat","section","mixRows","m","orders","randomOrder","generateSolvedSudoku","flipMatrix","Candidates","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleClass","column","candidates","state","active","setState","toggleClassKeyPress","event","candidateMode","currentActive","guess","keyCode","inputNum","parseInt","String","fromCharCode","c","value","document","addEventListener","removeEventListener","_this2","candidateStyle","display","react_default","a","createElement","className","style","prefilled","map","r","key","onClick","React","Component","Grid","cellstyle","conflicts","revealed","digit","Grid_Candidates","InputOptions","inputNumClass","id","handleInputNum","Toolbar","switchMode","restart","revealAll","backToYourAnswer","newGame","GameBoard","cell","sudoku","removeNumbers","num_prefilled","handleInputNumClick","checkConflict","handleInputKeyPress","currentActiveCell","updateConflicts","currentGrid","conflictPosition","objectSpread","conflictList","checkRowConflicts","checkColumnConflicts","checkNonetConflicts","startRow","startColumn","_this$checkRowConflic","_this$checkColumnConf","_this$checkNonetConfl","sudokuGenerator","Instruction","Footer","title","href","target","rel","ReactDOM","render","components_GameBoard","getElementById"],"mappings":"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","file":"static/js/main.60e8e250.chunk.js","sourcesContent":["function generateSeed(){\r\n    let n = [1,2,3,4,5,6,7,8,9];\r\n    let seed = [];\r\n\r\n    while(n.length > 1){\r\n        let index = Math.floor(Math.random()*n.length);\r\n        seed.push(n[index]);\r\n        n.splice(index, 1);\r\n    }\r\n\r\n    seed.push(n[0]);\r\n\r\n    return seed;\r\n}\r\n\r\nfunction generateThreeRows(seed){\r\n    let result = [seed];\r\n    for(let i = 0; i < 2; i++){\r\n        let currentRow = result[result.length - 1];\r\n        let row = [];\r\n\r\n        for(let j = 0; j < 9; j = j+3){\r\n            if(j <= 5){\r\n                row.push(currentRow[j + 3]);\r\n                row.push(currentRow[j + 4]);\r\n                row.push(currentRow[j + 5]);\r\n            }\r\n            else{\r\n                row.push(currentRow[0]);\r\n                row.push(currentRow[1]);\r\n                row.push(currentRow[2]);\r\n            }\r\n        }\r\n        result.push(row);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction generateMatrix(){\r\n    let seed = generateSeed();    \r\n    let matrix = [];\r\n\r\n    let lastSeed = [...seed];\r\n    let currentSeed = [...seed];\r\n    for(let i = 0; i < 3; i++){\r\n        if(i > 0){\r\n            let temp = [...lastSeed];\r\n            temp.shift();\r\n            currentSeed = [...temp, lastSeed[0]];\r\n        }\r\n\r\n        let section = generateThreeRows(currentSeed);\r\n        matrix.push(section[0], section[1], section[2]);\r\n        lastSeed = [...currentSeed];\r\n    }\r\n\r\n    return matrix;\r\n}\r\n\r\nfunction mixRows(m){\r\n    let result = [];\r\n    let orders = [\r\n        [0,1,2],\r\n        [0,2,1],\r\n        [1,0,2],\r\n        [1,2,0],\r\n        [2,0,1],\r\n        [2,1,0]\r\n    ];\r\n\r\n    for(let i = 0; i < 9; i+=3){\r\n        let randomOrder = orders[Math.floor(Math.random()*orders.length)];\r\n\r\n        result.push(m[i + randomOrder[0]]);\r\n        result.push(m[i + randomOrder[1]]);\r\n        result.push(m[i + randomOrder[2]]);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction flipMatrix(m){\r\n    let result = [];\r\n    for(let i = 0; i < 9; i++){\r\n        let row = [];\r\n\r\n        for(let j = 0; j < 9; j++){\r\n            row.push(m[j][i]);\r\n        }\r\n        result.push(row);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction generateSolvedSudoku(){\r\n    let matrix = generateMatrix();\r\n    // console.log(\"Original Matrix:\\n\",matrix);\r\n\r\n    matrix = mixRows(matrix);\r\n    // console.log(\"Mixed Rows Matrix:\\n\",matrix);\r\n\r\n    matrix = flipMatrix(matrix);\r\n    // console.log(\"Flipped Matrix:\\n\",matrix);\r\n\r\n    matrix = mixRows(matrix);\r\n    // console.log(\"Mixed Rows Again Matrix:\\n\",matrix);\r\n\r\n    return matrix;\r\n}\r\n\r\nexport default generateSolvedSudoku;\r\n","import React from \"react\";\r\n// import Candidate from './Candidate';\r\n\r\nclass Candidates extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        // console.log(props.candidates);\r\n        let candidates = [];\r\n        for(let j = 0; j < 3; j++){\r\n            let row = [];\r\n            for(let i = 1; i < 4; i++){\r\n                let candidate = 3*j + i;\r\n                // console.log(candidate);\r\n                let c = {\r\n                    value: candidate,\r\n                    active: false\r\n                };\r\n                // if(props.candidates.includes(candidate))\r\n                //     c.active = true;\r\n                row.push(c);\r\n            }\r\n            candidates.push(row);\r\n        }\r\n        \r\n\r\n        this.state = {candidates};\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.addEventListener('keydown', this.toggleClassKeyPress);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        document.removeEventListener('keydown', this.toggleClassKeyPress);\r\n    }\r\n\r\n    toggleClass = (row, column)=>{\r\n        let candidates = [...this.state.candidates];\r\n\r\n        let active = !candidates[row][column].active;\r\n\r\n        candidates[row][column].active = active;\r\n\r\n        this.setState({candidates});\r\n    }\r\n\r\n    toggleClassKeyPress = (event)=>{\r\n        if(!this.props.candidateMode)\r\n            return;\r\n\r\n        if((this.props.row !== this.props.currentActive.row) || (this.props.column !== this.props.currentActive.column))\r\n            return;\r\n        \r\n        if(this.props.guess === 0 && (event.keyCode === 8 || event.keyCode === 46)){\r\n            let candidates = [...this.state.candidates];\r\n            for(let i = 0; i < candidates.length; i++){\r\n                for(let j = 0; j < candidates[i].length; j++){\r\n                    candidates[i][j].active = false;\r\n                }\r\n            }\r\n            this.setState({candidates});\r\n        }\r\n\r\n        if(event.keyCode >= 49 && event.keyCode <= 57){\r\n            let inputNum = parseInt(String.fromCharCode(event.keyCode));\r\n            let candidates = [...this.state.candidates];\r\n            switch (inputNum) {\r\n                case 1 :\r\n                    candidates[0][0].active = !candidates[0][0].active;\r\n                    break;\r\n                case 2 :\r\n                    candidates[0][1].active = !candidates[0][1].active;\r\n                    break;\r\n                case 3 :\r\n                    candidates[0][2].active = !candidates[0][2].active;\r\n                    break;\r\n                case 4 :\r\n                    candidates[1][0].active = !candidates[1][0].active;\r\n                    break;\r\n                case 5 :\r\n                    candidates[1][1].active = !candidates[1][1].active;\r\n                    break;\r\n                case 6 :\r\n                    candidates[1][2].active = !candidates[1][2].active;\r\n                    break;\r\n                case 7 :\r\n                    candidates[2][0].active = !candidates[2][0].active;\r\n                    break;\r\n                case 8 :\r\n                    candidates[2][1].active = !candidates[2][1].active;\r\n                    break;\r\n                case 9 :\r\n                    candidates[2][2].active = !candidates[2][2].active;\r\n                    break;\r\n                default: \r\n                    break;\r\n            }\r\n\r\n            this.setState({candidates});\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let candidateStyle = {};\r\n        if(!this.props.display)\r\n            candidateStyle = {\r\n                display: 'none'\r\n            };\r\n        \r\n        return(\r\n            <div className=\"candidates\" style={candidateStyle}>\r\n                {!this.props.prefilled &&\r\n                    <table>\r\n                        <tbody>\r\n                            {this.state.candidates.map((r,i)=>(\r\n                                <tr key={`${this.props.row}${this.props.column}row${i}`}>\r\n                                    {r.map((c, j)=>(\r\n                                        <td className={this.state.candidates[i][j].active ? 'activeCandidate' : ''} \r\n                                            key={`${this.props.row}${this.props.column}column${j}`} \r\n                                            onClick={()=>this.toggleClass(i, j)}\r\n                                        >\r\n                                            {c.value}\r\n                                        </td>\r\n                                    ))}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Candidates;\r\n","import React from \"react\";\r\nimport Candidates from \"./Candidates\";\r\n\r\nexport default (props)=>{\r\n    let cellstyle = 'cell';\r\n\r\n    if(props.n.active)\r\n        cellstyle+=' active';\r\n\r\n    if(props.n.conflicts.length !== 0 && !props.revealed)\r\n        cellstyle+=' conflict';\r\n    \r\n    return(\r\n        <td className={props.n.prefilled ? 'inactive' : ''} key={`${props.n.row}${props.n.column}`}>\r\n            <div className={cellstyle} onClick={()=>props.toggleClass(props.n)}>\r\n                {props.n.prefilled && props.n.digit}\r\n                {/* {!props.n.prefilled && props.n.guess!==0 && */}\r\n                    <div className=\"entry\">\r\n                        {props.n.guess!==0 && !props.revealed && props.n.guess}\r\n                        {!props.n.prefilled && props.revealed && props.n.digit}\r\n                    </div>\r\n                {/* } */}\r\n                {/* {!props.n.prefilled && (props.n.guess === 0) && */}\r\n                    <Candidates \r\n                        // gridPosition={`${props.n.row}${props.n.column}`}\r\n                        guess={props.n.guess}\r\n                        row={props.n.row}\r\n                        column={props.n.column}\r\n                        prefilled={props.n.prefilled}\r\n                        // candidates={props.n.candidates}\r\n                        display={props.n.guess === 0}\r\n                        currentActive={props.currentActive}\r\n                        candidateMode={props.candidateMode}\r\n                    />\r\n                {/* } */}\r\n            </div>\r\n        </td>\r\n    );\r\n};","import React from \"react\";\r\n\r\nexport default (props) => {\r\n    let inputNumClass = 'inputNum';\r\n\r\n    if(props.currentActive.row === -1)\r\n        inputNumClass += \" inactive\";\r\n\r\n    if(props.revealed)\r\n        inputNumClass += \" inactive\";\r\n\r\n    let inputNums = [1,2,3,4,5,6,7,8,9];\r\n    \r\n    return (\r\n        <div id=\"inputOptions\">\r\n            {inputNums.map(n=>(\r\n                <div key={n} \r\n                    className={props.guess===n ? `${inputNumClass} entered` : inputNumClass} \r\n                    onClick={()=>props.handleInputNum(n)}>\r\n                    {n}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default (props)=>{\r\n    return (\r\n        <div id='toolbar'>\r\n            {props.candidateMode && \r\n                <button className='entryMode' onClick={()=>props.switchMode()}>Switch to Entry Mode</button>\r\n            }\r\n            {!props.candidateMode && \r\n                <button className='entryMode' onClick={()=>props.switchMode()}>Switch to Candidate Mode</button>\r\n            }\r\n            <button className='restart' onClick={()=>{props.restart()}}>Restart</button>\r\n            {!props.revealed && \r\n                <button className='revealall' onClick={()=>props.revealAll()}>Reveal all</button>\r\n            }\r\n            {props.revealed &&\r\n                <button className='back2answer' onClick={()=>props.backToYourAnswer()}>Go back to your answer</button>\r\n            }\r\n            <button className='newgame' onClick={()=>props.newGame()}>New game</button>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport sudokuGenerator from '../sudokuGenerator';\r\nimport Grid from \"./Grid/Grid\";\r\nimport InputOptions from './Grid/InputOptions';\r\nimport Toolbar from './Toolbar';\r\n\r\nclass GameBoard extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        let solvedSudoku = sudokuGenerator();\r\n        let sudoku = solvedSudoku.map((row, r)=>{\r\n            return row.map((n, c)=>{\r\n                return {\r\n                    digit: n,\r\n                    guess: 0,\r\n                    // candidates: [],\r\n                    prefilled: true,\r\n                    conflicts: [],\r\n                    active: false,\r\n                    row: r,\r\n                    column: c\r\n                };\r\n            });\r\n        });\r\n\r\n        sudoku = this.removeNumbers(sudoku);\r\n\r\n        this.state = {\r\n            sudoku,\r\n            //currentActive : null\r\n            currentActive : {\r\n                row: -1,\r\n                column: -1\r\n            },\r\n            revealed: false,\r\n            candidateMode: false\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.addEventListener('keydown', this.handleInputKeyPress);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        document.removeEventListener('keydown', this.handleInputKeyPress);\r\n    }\r\n\r\n    toggleClass = (cell) =>{\r\n        if(cell.prefilled)\r\n            return;\r\n\r\n        let sudoku = [...this.state.sudoku];\r\n        sudoku[cell.row][cell.column].active = true;\r\n\r\n        if(this.state.currentActive.row === -1){\r\n            this.setState({\r\n                currentActive: {row: cell.row, column: cell.column},\r\n                sudoku\r\n            });\r\n        }\r\n        else if(cell.row === this.state.currentActive.row && cell.column === this.state.currentActive.column)\r\n            return;\r\n        else{\r\n            sudoku[this.state.currentActive.row][this.state.currentActive.column].active = false;\r\n            this.setState({\r\n                currentActive: {row: cell.row, column: cell.column},\r\n                sudoku\r\n            });\r\n        }\r\n    }\r\n\r\n    removeNumbers = (sudoku) => {\r\n        // .21\r\n        let num_prefilled = 81;\r\n\r\n        for(let i = 0; i < 9; i++){\r\n            for(let j = 0; j < 9; j++){\r\n                if(num_prefilled > 22 && Math.random() > (22/81)){\r\n                    sudoku[i][j].prefilled = false;\r\n                    num_prefilled--;\r\n                }\r\n\r\n                if(num_prefilled <= 17)\r\n                    break;\r\n            }\r\n            if(num_prefilled <= 17)\r\n                break;\r\n        }\r\n\r\n        return sudoku;\r\n    }\r\n\r\n    handleInputNumClick = (inputNum) => {\r\n        if(this.state.currentActive.row === -1 || this.state.revealed)\r\n            return;\r\n\r\n        let sudoku = [...this.state.sudoku];\r\n\r\n        if(sudoku[this.state.currentActive.row][this.state.currentActive.column].guess === inputNum)\r\n            return;\r\n\r\n        sudoku[this.state.currentActive.row][this.state.currentActive.column].guess = inputNum;\r\n\r\n        this.setState({sudoku}, ()=>this.checkConflict());\r\n    }\r\n\r\n    handleInputKeyPress = (event)=>{\r\n        if(this.state.currentActive.row === -1 || this.state.revealed)\r\n            return;\r\n\r\n        if((event.keyCode >= 49 && event.keyCode <= 57) || event.keyCode === 8 || event.keyCode === 46){\r\n            let sudoku = [...this.state.sudoku];\r\n            let inputNum = parseInt(String.fromCharCode(event.keyCode));\r\n            let currentActiveCell = sudoku[this.state.currentActive.row][this.state.currentActive.column];\r\n\r\n            if(this.state.candidateMode && event.keyCode !== 8 && event.keyCode !== 46){\r\n                currentActiveCell.guess = 0;\r\n            }\r\n            else{\r\n                if(currentActiveCell.guess === inputNum)\r\n                    return;\r\n\r\n                if(event.keyCode === 8 || event.keyCode === 46)\r\n                    currentActiveCell.guess = 0;\r\n                else \r\n                    currentActiveCell.guess = inputNum;\r\n            }\r\n\r\n            sudoku[this.state.currentActive.row][this.state.currentActive.column] = currentActiveCell;\r\n            this.setState({sudoku}, ()=>this.checkConflict());\r\n        }\r\n    }\r\n\r\n    updateConflicts = (sudoku, currentActive, currentGrid) => {\r\n        for(let i = 0; i < currentGrid.conflicts.length; i++){\r\n            let conflictPosition = {...currentGrid.conflicts[i]};\r\n            let conflictList = [...sudoku[conflictPosition.row][conflictPosition.column].conflicts];\r\n\r\n            for(let j = 0; j < conflictList.length; j++){\r\n                if(conflictList[j].row === currentActive.row && \r\n                    conflictList[j].column === currentActive.column){\r\n                        conflictList.splice(j,1);\r\n                        sudoku[conflictPosition.row][conflictPosition.column].conflicts = [...conflictList];\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return sudoku;\r\n    }\r\n\r\n    checkRowConflicts = (sudoku, currentActive, currentGrid) => {\r\n        for(let c = 0; c < 9; c++){\r\n            if(c === currentActive.column)\r\n                continue;\r\n\r\n            if((sudoku[currentActive.row][c].prefilled && sudoku[currentActive.row][c].digit === currentGrid.guess) || \r\n                (!sudoku[currentActive.row][c].prefilled && sudoku[currentActive.row][c].guess === currentGrid.guess)){\r\n                    currentGrid.conflicts.push({row:currentActive.row, column:c});\r\n                    sudoku[currentActive.row][c].conflicts.push(currentActive);\r\n                }\r\n        }\r\n\r\n        return {sudoku, currentGrid};\r\n    }\r\n\r\n    checkColumnConflicts = (sudoku, currentActive, currentGrid) => {\r\n        for(let r = 0; r < 9; r++){\r\n            if(r === currentActive.row)\r\n                continue;\r\n\r\n            if((sudoku[r][currentActive.column].prefilled && \r\n                sudoku[r][currentActive.column].digit === currentGrid.guess) || \r\n                (!sudoku[r][currentActive.column].prefilled &&\r\n                    sudoku[r][currentActive.column].guess === currentGrid.guess)){\r\n                    currentGrid.conflicts.push({row: r, column:currentActive.column});\r\n                    sudoku[r][currentActive.column].conflicts.push(currentActive);\r\n                }\r\n        }\r\n\r\n        return {sudoku, currentGrid};\r\n    }\r\n\r\n    checkNonetConflicts = (sudoku, currentActive, currentGrid) => {\r\n        let startRow, startColumn;\r\n\r\n        switch (currentActive.row % 3){\r\n            case 0:\r\n                startRow = currentActive.row;\r\n                break;\r\n            case 1:\r\n                startRow = currentActive.row - 1;\r\n                break;\r\n            case 2:\r\n                startRow = currentActive.row - 2;\r\n                break;\r\n            default:\r\n                startRow = -1;\r\n                break;\r\n        }\r\n\r\n        switch (currentActive.column % 3){\r\n            case 0:\r\n                startColumn = currentActive.column;\r\n                break;\r\n            case 1:\r\n                startColumn = currentActive.column - 1;\r\n                break;\r\n            case 2:\r\n                startColumn = currentActive.column - 2;\r\n                break;\r\n            default:\r\n                startColumn = -1;\r\n                break;\r\n        }\r\n\r\n        for(let r = 0; r < 3; r++){\r\n            for(let c = 0; c < 3; c++){\r\n                let row = startRow + r;\r\n                let column = startColumn + c;\r\n                if(row === currentActive.row || column === currentActive.column)\r\n                    continue;\r\n\r\n                if((sudoku[row][column].prefilled && \r\n                    sudoku[row][column].digit === currentGrid.guess) || \r\n                    (!sudoku[row][column].prefilled &&\r\n                        sudoku[row][column].guess === currentGrid.guess)){\r\n                        currentGrid.conflicts.push({row, column});\r\n                        sudoku[row][column].conflicts.push(currentActive);\r\n                    }\r\n            }\r\n        }\r\n\r\n        return {sudoku, currentGrid};\r\n    }\r\n\r\n    checkConflict = ()=>{\r\n        let sudoku = [...this.state.sudoku];\r\n        let currentActive = {...this.state.currentActive};\r\n        let currentGrid = {...sudoku[currentActive.row][currentActive.column]};\r\n\r\n        sudoku = this.updateConflicts(sudoku, currentActive, currentGrid);\r\n\r\n        // reset conflicts for new input\r\n        currentGrid.conflicts = [];\r\n\r\n        //row\r\n        ({sudoku, currentGrid} = this.checkRowConflicts(sudoku, currentActive, currentGrid));\r\n\r\n        //column\r\n        ({sudoku, currentGrid} = this.checkColumnConflicts(sudoku, currentActive, currentGrid));\r\n\r\n        //nonet\r\n        ({sudoku, currentGrid} = this.checkNonetConflicts(sudoku, currentActive, currentGrid));\r\n\r\n        sudoku[currentActive.row][currentActive.column] = {...currentGrid};\r\n        this.setState({sudoku});\r\n    }\r\n\r\n    newGame = ()=>{\r\n        let solvedSudoku = sudokuGenerator();\r\n        let sudoku = solvedSudoku.map((row, r)=>{\r\n            return row.map((n, c)=>{\r\n                return {\r\n                    digit: n,\r\n                    guess: 0,\r\n                    prefilled: true,\r\n                    conflicts: [],\r\n                    active: false,\r\n                    row: r,\r\n                    column: c\r\n                };\r\n            });\r\n        });\r\n\r\n        sudoku = this.removeNumbers(sudoku);\r\n\r\n        this.setState({\r\n            sudoku, \r\n            currentActive : {\r\n                row: -1,\r\n                column: -1\r\n            },\r\n            revealed: false\r\n        });\r\n    }\r\n\r\n    revealAll = ()=>{\r\n        this.setState({revealed: true});\r\n    }\r\n\r\n    backToYourAnswer = ()=>{\r\n        this.setState({revealed: false});\r\n    }\r\n\r\n    restart = ()=>{\r\n        let sudoku = [...this.state.sudoku];\r\n\r\n        sudoku = sudoku.map(r=>{\r\n            return r.map(n=>{\r\n                n.conflicts = [];\r\n                n.guess = 0;\r\n                return n;\r\n            });\r\n        });\r\n        \r\n        this.setState({sudoku});\r\n    }\r\n\r\n    switchMode = ()=> {\r\n        let candidateMode = this.state.candidateMode;\r\n\r\n        this.setState({candidateMode: !candidateMode});\r\n    }\r\n\r\n    // handleInputCandidates\r\n\r\n    render(){\r\n        return(\r\n            <div id='game'>\r\n                <Toolbar \r\n                    candidateMode={this.state.candidateMode}\r\n                    switchMode={this.switchMode}\r\n                    newGame={this.newGame} \r\n                    revealAll={this.revealAll} \r\n                    backToYourAnswer={this.backToYourAnswer}\r\n                    revealed={this.state.revealed}\r\n                    restart={this.restart}\r\n                />\r\n                <div id=\"gameboard\">\r\n                    <table>\r\n                        <tbody>\r\n                            {this.state.sudoku.map((row, i)=>(\r\n                                <tr key={i}>\r\n                                    {row.map((n)=>(\r\n                                        <Grid \r\n                                            key={`${n.row}${n.column}`} \r\n                                            n={n} \r\n                                            toggleClass={this.toggleClass}\r\n                                            revealed={this.state.revealed}\r\n                                            candidateMode={this.state.candidateMode}\r\n                                            currentActive={this.state.currentActive}\r\n                                        />\r\n                                    ))}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <InputOptions \r\n                        guess={this.state.currentActive.row!==-1 ? \r\n                            this.state.sudoku[this.state.currentActive.row][this.state.currentActive.column].guess : 0}\r\n                        currentActive={this.state.currentActive} \r\n                        handleInputNum={this.handleInputNumClick}\r\n                        revealed={this.state.revealed}\r\n                    />\r\n                </div>\r\n                {/* <Toolbar \r\n                    newGame={this.newGame} \r\n                    revealAll={this.revealAll} \r\n                    backToYourAnswer={this.backToYourAnswer}\r\n                    revealed={this.state.revealed}\r\n                    restart={this.restart}\r\n                /> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameBoard;","import React from \"react\";\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div id='instruction'>\r\n            <h3><u>Classic Sudoku Rules</u></h3>\r\n            <p>\r\n                There are 9 rows, 9 columns, and 9 3x3 blocks. \r\n                Fill in the empty cells with the numbers 1-9, without repeating any numbers within the row, column, or block.\r\n            </p>\r\n            <h3><u>How to Play</u></h3>\r\n            <p>\r\n                Click on each empty cell, enter digit with keyboard or number bar that's provided. \r\n                Use Backspace or Delete to clear entries.\r\n            </p>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport default ()=>{\r\n    return (\r\n        <div id='footer'>\r\n            Web Sudoku &copy;2019&nbsp;\r\n            <a title=\"Github\" href=\"https://github.com/huwu55/Web-Sudoku\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                Huiling Wu <i className=\"fab fa-github\"></i>\r\n            </a>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./style/style.css\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));","import React from \"react\";\r\n// import sudokuGenerator from './sudokuGenerator';\r\nimport GameBoard from './components/GameBoard';\r\nimport Instruction from './components/Instruction';\r\n// import Toolbar from './components/Toolbar';\r\nimport Footer from './components/Footer';\r\nimport \"./style/style.css\";\r\n\r\n\r\n// class Sudoku extends React.Component {\r\n//     constructor(){\r\n//         super();\r\n\r\n//         // let solvedSudoku = sudokuGenerator();\r\n\r\n//         // this.state = {\r\n//         //     solvedSudoku,\r\n//         //     revealAll: false\r\n//         // }\r\n//     }\r\n\r\n//     // newGame = ()=>{\r\n//     //     // console.log(\"hello\");\r\n//     //     let solvedSudoku = sudokuGenerator();\r\n//     //     this.setState({solvedSudoku});\r\n//     //     console.log(solvedSudoku);\r\n//     // }\r\n\r\n//     // revealAll = ()=>{}\r\n\r\n//     render(){\r\n//         return(\r\n//             <div id='app'>\r\n//                 <Instruction />\r\n//                 <GameBoard />\r\n//                 {/* <Toolbar newGame={this.newGame} /> */}\r\n//             </div>\r\n//         );\r\n//     }\r\n\r\n// }\r\n\r\n// export default Sudoku;\r\n\r\n\r\nexport default ()=>{\r\n    return (\r\n        <div id='app'>\r\n            <Instruction />\r\n            <GameBoard />\r\n            <Footer/>\r\n        </div>\r\n    );\r\n}"],"sourceRoot":""}
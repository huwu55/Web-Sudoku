{"version":3,"sources":["sudokuGenerator.js","components/Grid/Candidates.js","components/Grid/Grid.js","components/Grid/InputOptions.js","components/Toolbar.js","components/SudokuCompleted.js","components/GameBoard.js","components/Instruction.js","components/Footer.js","index.js","App.js"],"names":["generateThreeRows","seed","result","i","currentRow","length","row","j","push","generateMatrix","n","index","Math","floor","random","splice","generateSeed","matrix","lastSeed","Object","toConsumableArray","currentSeed","temp","shift","concat","section","mixRows","m","orders","randomOrder","generateSolvedSudoku","flipMatrix","Candidates","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleClass","column","currentActive","candidates","state","active","setState","toggleClassKeyPress","event","candidateMode","guess","keyCode","inputNum","parseInt","String","fromCharCode","resetCandidates","r","c","value","document","addEventListener","removeEventListener","prevProps","_this2","candidateStyle","display","revealed","react_default","a","createElement","className","style","prefilled","map","key","onClick","React","Component","Grid","cellstyle","conflicts","digit","Grid_Candidates","InputOptions","inputNumClass","id","handleInputNum","Toolbar","title","switchMode","revealAll","backToYourAnswer","newGame","SudokuCompleted","GameBoard","cell","sudoku","removeNumbers","num_prefilled","sudoku_new","numPrefilled","handleInputNumClick","checkConflict","handleInputKeyPress","currentActiveCell","numGuessed","checkIfCompletedSudoku","updateConflicts","currentGrid","conflictPosition","objectSpread","conflictList","checkRowConflicts","checkColumnConflicts","checkNonetConflicts","startRow","startColumn","_this$checkRowConflic","_this$checkColumnConf","_this$checkNonetConfl","sudokuGenerator","_this$removeNumbers","completed","_this$removeNumbers2","restart","Instruction","Footer","href","target","rel","ReactDOM","render","components_GameBoard","getElementById"],"mappings":"0NAeA,SAASA,EAAkBC,GAEvB,IADA,IAAIC,EAAS,CAACD,GACNE,EAAI,EAAGA,EAAI,EAAGA,IAAI,CAItB,IAHA,IAAIC,EAAaF,EAAOA,EAAOG,OAAS,GACpCC,EAAM,GAEFC,EAAI,EAAGA,EAAI,EAAGA,GAAM,EACrBA,GAAK,GACJD,EAAIE,KAAKJ,EAAWG,EAAI,IACxBD,EAAIE,KAAKJ,EAAWG,EAAI,IACxBD,EAAIE,KAAKJ,EAAWG,EAAI,MAGxBD,EAAIE,KAAKJ,EAAW,IACpBE,EAAIE,KAAKJ,EAAW,IACpBE,EAAIE,KAAKJ,EAAW,KAG5BF,EAAOM,KAAKF,GAGhB,OAAOJ,EAGX,SAASO,IAML,IALA,IAAIR,EAxCR,WAII,IAHA,IAAIS,EAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACrBT,EAAO,GAELS,EAAEL,OAAS,GAAE,CACf,IAAIM,EAAQC,KAAKC,MAAMD,KAAKE,SAASJ,EAAEL,QACvCJ,EAAKO,KAAKE,EAAEC,IACZD,EAAEK,OAAOJ,EAAO,GAKpB,OAFAV,EAAKO,KAAKE,EAAE,IAELT,EA4BIe,GACPC,EAAS,GAETC,EAAQC,OAAAC,EAAA,EAAAD,CAAOlB,GACfoB,EAAWF,OAAAC,EAAA,EAAAD,CAAOlB,GACdE,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACtB,GAAGA,EAAI,EAAE,CACL,IAAImB,EAAIH,OAAAC,EAAA,EAAAD,CAAOD,GACfI,EAAKC,QACLF,EAAW,GAAAG,OAAAL,OAAAC,EAAA,EAAAD,CAAOG,GAAP,CAAaJ,EAAS,KAGrC,IAAIO,EAAUzB,EAAkBqB,GAChCJ,EAAOT,KAAKiB,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,IAC5CP,EAAQC,OAAAC,EAAA,EAAAD,CAAOE,GAGnB,OAAOJ,EAGX,SAASS,EAAQC,GAWb,IAVA,IAAIzB,EAAS,GACT0B,EAAS,CACT,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAGDzB,EAAI,EAAGA,EAAI,EAAGA,GAAG,EAAE,CACvB,IAAI0B,EAAcD,EAAOhB,KAAKC,MAAMD,KAAKE,SAASc,EAAOvB,SAEzDH,EAAOM,KAAKmB,EAAExB,EAAI0B,EAAY,KAC9B3B,EAAOM,KAAKmB,EAAExB,EAAI0B,EAAY,KAC9B3B,EAAOM,KAAKmB,EAAExB,EAAI0B,EAAY,KAGlC,OAAO3B,EAiCI4B,MAhBf,WACI,IAAIb,EAASR,IAYb,OATAQ,EAASS,EAAQT,GAMjBA,EAASS,EAHTT,EArBJ,SAAoBU,GAEhB,IADA,IAAIzB,EAAS,GACLC,EAAI,EAAGA,EAAI,EAAGA,IAAI,CAGtB,IAFA,IAAIG,EAAM,GAEFC,EAAI,EAAGA,EAAI,EAAGA,IAClBD,EAAIE,KAAKmB,EAAEpB,GAAGJ,IAElBD,EAAOM,KAAKF,GAGhB,OAAOJ,EAUE6B,CAAWd,KCyDTe,cA5JX,SAAAA,EAAYC,GAAM,IAAAC,EAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAJ,IACdE,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAAa,GAAAO,KAAAH,KAAMH,KAyCVO,YAAc,SAAClC,EAAKmC,GAChB,GAAGP,EAAKD,MAAMS,cAAcpC,MAAQ4B,EAAKD,MAAM3B,KAC3C4B,EAAKD,MAAMS,cAAcD,SAAWP,EAAKD,MAAMQ,OAAO,CACtD,IAAIE,EAAUxB,OAAAC,EAAA,EAAAD,CAAOe,EAAKU,MAAMD,YAE5BE,GAAUF,EAAWrC,GAAKmC,GAAQI,OAEtCF,EAAWrC,GAAKmC,GAAQI,OAASA,EAEjCX,EAAKY,SAAS,CAACH,iBAnDLT,EAuDlBa,oBAAsB,SAACC,GACnB,GAAId,EAAKD,MAAMgB,eAGXf,EAAKD,MAAM3B,MAAQ4B,EAAKD,MAAMS,cAAcpC,KAAS4B,EAAKD,MAAMQ,SAAWP,EAAKD,MAAMS,cAAcD,OAAxG,CAGA,GAAwB,IAArBP,EAAKD,MAAMiB,QAAkC,IAAlBF,EAAMG,SAAmC,KAAlBH,EAAMG,SAAgB,CAEvE,IADA,IAAIR,EAAUxB,OAAAC,EAAA,EAAAD,CAAOe,EAAKU,MAAMD,YACxBxC,EAAI,EAAGA,EAAIwC,EAAWtC,OAAQF,IAClC,IAAI,IAAII,EAAI,EAAGA,EAAIoC,EAAWxC,GAAGE,OAAQE,IACrCoC,EAAWxC,GAAGI,GAAGsC,QAAS,EAGlCX,EAAKY,SAAS,CAACH,eAGnB,GAAGK,EAAMG,SAAW,IAAMH,EAAMG,SAAW,GAAG,CAC1C,IAAIC,EAAWC,SAASC,OAAOC,aAAaP,EAAMG,UAC9CR,EAAUxB,OAAAC,EAAA,EAAAD,CAAOe,EAAKU,MAAMD,YAChC,OAAQS,GACJ,KAAK,EACDT,EAAW,GAAG,GAAGE,QAAUF,EAAW,GAAG,GAAGE,OAC5C,MACJ,KAAK,EACDF,EAAW,GAAG,GAAGE,QAAUF,EAAW,GAAG,GAAGE,OAC5C,MACJ,KAAK,EACDF,EAAW,GAAG,GAAGE,QAAUF,EAAW,GAAG,GAAGE,OAC5C,MACJ,KAAK,EACDF,EAAW,GAAG,GAAGE,QAAUF,EAAW,GAAG,GAAGE,OAC5C,MACJ,KAAK,EACDF,EAAW,GAAG,GAAGE,QAAUF,EAAW,GAAG,GAAGE,OAC5C,MACJ,KAAK,EACDF,EAAW,GAAG,GAAGE,QAAUF,EAAW,GAAG,GAAGE,OAC5C,MACJ,KAAK,EACDF,EAAW,GAAG,GAAGE,QAAUF,EAAW,GAAG,GAAGE,OAC5C,MACJ,KAAK,EACDF,EAAW,GAAG,GAAGE,QAAUF,EAAW,GAAG,GAAGE,OAC5C,MACJ,KAAK,EACDF,EAAW,GAAG,GAAGE,QAAUF,EAAW,GAAG,GAAGE,OAMpDX,EAAKY,SAAS,CAACH,kBA3GLT,EA+GlBsB,gBAAkB,WAId,IAFA,IAAIb,EAAUxB,OAAAC,EAAA,EAAAD,CAAOe,EAAKU,MAAMD,YAExBc,EAAI,EAAGA,EAAI,EAAGA,IAClB,IAAI,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAClBf,EAAWc,GAAGC,GAAGb,QAAS,EAIlCX,EAAKY,SAAS,CAACH,gBArHf,IADA,IAAIA,EAAa,GACTpC,EAAI,EAAGA,EAAI,EAAGA,IAAI,CAEtB,IADA,IAAID,EAAM,GACFH,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACtB,IAEIuD,EAAI,CACJC,MAHY,EAAEpD,EAAIJ,EAIlB0C,QAAQ,GAIZvC,EAAIE,KAAKkD,GAEbf,EAAWnC,KAAKF,GAjBN,OAqBd4B,EAAKU,MAAQ,CAACD,cArBAT,mFAyBd0B,SAASC,iBAAiB,UAAWzB,KAAKW,oEAK1Ca,SAASE,oBAAoB,UAAW1B,KAAKW,gEAG9BgB,IACsB,IAAlC3B,KAAKH,MAAMS,cAAcpC,MACa,IAArC8B,KAAKH,MAAMS,cAAcD,QAClBsB,EAAUrB,cAAcpC,MAAQ8B,KAAKH,MAAMS,cAAcpC,KACxDyD,EAAUrB,cAAcD,SAAWL,KAAKH,MAAMS,cAAcpC,KAC5D8B,KAAKoB,mDAsFb,IAAAQ,EAAA5B,KACA6B,EAAiB,GAMrB,OALI7B,KAAKH,MAAMiC,UAAW9B,KAAKH,MAAMkC,WACjCF,EAAiB,CACbC,QAAS,SAIbE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaC,MAAOP,IAC7B7B,KAAKH,MAAMwC,WACTL,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACKlC,KAAKQ,MAAMD,WAAW+B,IAAI,SAACjB,EAAEtD,GAAH,OACvBiE,EAAAC,EAAAC,cAAA,MAAIK,IAAG,GAAAnD,OAAKwC,EAAK/B,MAAM3B,KAAhBkB,OAAsBwC,EAAK/B,MAAMQ,OAAjC,OAAAjB,OAA6CrB,IAC/CsD,EAAEiB,IAAI,SAAChB,EAAGnD,GAAJ,OACH6D,EAAAC,EAAAC,cAAA,MAAIC,UAAWP,EAAKpB,MAAMD,WAAWxC,GAAGI,GAAGsC,OAAS,kBAAoB,GACpE8B,IAAG,GAAAnD,OAAKwC,EAAK/B,MAAM3B,KAAhBkB,OAAsBwC,EAAK/B,MAAMQ,OAAjC,UAAAjB,OAAgDjB,GACnDqE,QAAS,kBAAIZ,EAAKxB,YAAYrC,EAAGI,KAEhCmD,EAAEC,sBAhJtBkB,IAAMC,WCAhBC,EAAA,SAAC9C,GACZ,IAAI+C,EAAY,OAWhB,OATG/C,EAAMvB,EAAEmC,SACPmC,GAAW,WAEiB,IAA7B/C,EAAMvB,EAAEuE,UAAU5E,QAAiB4B,EAAMkC,WACxCa,GAAW,cAEZ/C,EAAMvB,EAAE+D,WAA6B,IAAhBxC,EAAMvB,EAAEwC,OAAajB,EAAMkC,YAC/Ca,GAAW,UAGXZ,EAAAC,EAAAC,cAAA,MAAIC,UAAWtC,EAAMvB,EAAE+D,UAAY,WAAa,GAAIE,IAAG,GAAAnD,OAAKS,EAAMvB,EAAEJ,KAAbkB,OAAmBS,EAAMvB,EAAE+B,SAC9E2B,EAAAC,EAAAC,cAAA,OAAKC,UAAWS,EAAWJ,QAAS,kBAAI3C,EAAMO,YAAYP,EAAMvB,KAGxD0D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACVtC,EAAMvB,EAAE+D,WAAaxC,EAAMvB,EAAEwE,MACb,IAAhBjD,EAAMvB,EAAEwC,QAAcjB,EAAMkC,UAAYlC,EAAMvB,EAAEwC,OAC/CjB,EAAMvB,EAAE+D,WAAaxC,EAAMkC,UAAYlC,EAAMvB,EAAEwE,OAIrDd,EAAAC,EAAAC,cAACa,EAAD,CAEIjC,MAAOjB,EAAMvB,EAAEwC,MACf5C,IAAK2B,EAAMvB,EAAEJ,IACbmC,OAAQR,EAAMvB,EAAE+B,OAChBgC,UAAWxC,EAAMvB,EAAE+D,UAEnBP,QAA2B,IAAlBjC,EAAMvB,EAAEwC,MACjBR,cAAeT,EAAMS,cACrBO,cAAehB,EAAMgB,cACrBkB,SAAUlC,EAAMkC,cCnCzBiB,EAAA,SAACnD,GACZ,IAAIoD,EAAgB,YAEY,IAA7BpD,EAAMS,cAAcpC,MACnB+E,GAAiB,aAElBpD,EAAMkC,WACLkB,GAAiB,aAIrB,OACIjB,EAAAC,EAAAC,cAAA,OAAKgB,GAAG,gBAHI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAIdZ,IAAI,SAAAhE,GAAC,OACZ0D,EAAAC,EAAAC,cAAA,OAAKK,IAAKjE,EACN6D,UAAWtC,EAAMiB,QAAQxC,EAAd,GAAAc,OAAqB6D,EAArB,YAA+CA,EAC1DT,QAAS,kBAAI3C,EAAMsD,eAAe7E,KACjCA,OCjBN8E,EAAA,SAACvD,GACZ,OACImC,EAAAC,EAAAC,cAAA,OAAKgB,GAAG,WACHrD,EAAMgB,eACHmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYkB,MAAM,uBAAuBb,QAAS,kBAAI3C,EAAMyD,eACvEtB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,aACAH,EAAAC,EAAAC,cAAA,qCAGNrC,EAAMgB,eACJmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYkB,MAAM,2BAA2Bb,QAAS,kBAAI3C,EAAMyD,eAC3EtB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,WACAH,EAAAC,EAAAC,cAAA,yCAMNrC,EAAMkC,UACJC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYK,QAAS,kBAAI3C,EAAM0D,cAAjD,cAEH1D,EAAMkC,UACHC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcK,QAAS,kBAAI3C,EAAM2D,qBAAnD,uBAEJxB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUK,QAAS,kBAAI3C,EAAM4D,YAA/C,cCxBGC,EAAA,SAAC7D,GACZ,OACImC,EAAAC,EAAAC,cAAA,OAAKgB,GAAG,mBAAR,gBCuZOS,cAnZX,SAAAA,EAAY9D,GAAM,IAAAC,EAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAA2D,IACd7D,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAA4E,GAAAxD,KAAAH,KAAMH,KA2CVO,YAAc,SAACwD,GACX,IAAGA,EAAKvB,UAAR,CAGA,IAAIwB,EAAM9E,OAAAC,EAAA,EAAAD,CAAOe,EAAKU,MAAMqD,QAG5B,GAFAA,EAAOD,EAAK1F,KAAK0F,EAAKvD,QAAQI,QAAS,GAEF,IAAlCX,EAAKU,MAAMF,cAAcpC,IACxB4B,EAAKY,SAAS,CACVJ,cAAe,CAACpC,IAAK0F,EAAK1F,IAAKmC,OAAQuD,EAAKvD,QAC5CwD,eAGH,IAAGD,EAAK1F,MAAQ4B,EAAKU,MAAMF,cAAcpC,KAAO0F,EAAKvD,SAAWP,EAAKU,MAAMF,cAAcD,OAC1F,OAEAwD,EAAO/D,EAAKU,MAAMF,cAAcpC,KAAK4B,EAAKU,MAAMF,cAAcD,QAAQI,QAAS,EAC/EX,EAAKY,SAAS,CACVJ,cAAe,CAACpC,IAAK0F,EAAK1F,IAAKmC,OAAQuD,EAAKvD,QAC5CwD,cA/DM/D,EAoElBgE,cAAgB,SAACD,GAGb,IAFA,IAAIE,EAAgB,GAEZhG,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACtB,IAAI,IAAII,EAAI,EAAGA,EAAI,IACZ4F,EAAgB,IAAMvF,KAAKE,SAAY,GAAG,KACzCmF,EAAO9F,GAAGI,GAAGkE,WAAY,EACzB0B,OAGDA,GAAiB,KANF5F,KAStB,GAAG4F,GAAiB,GAChB,MAGR,MAAO,CAACC,WAAYH,EAAQI,aAAcF,IArF5BjE,EAyFlBoE,oBAAsB,SAAClD,GACnB,IAAqC,IAAlClB,EAAKU,MAAMF,cAAcpC,MAAc4B,EAAKU,MAAMuB,SAArD,CAGA,IAAI8B,EAAM9E,OAAAC,EAAA,EAAAD,CAAOe,EAAKU,MAAMqD,QAEzBA,EAAO/D,EAAKU,MAAMF,cAAcpC,KAAK4B,EAAKU,MAAMF,cAAcD,QAAQS,QAAUE,IAGnF6C,EAAO/D,EAAKU,MAAMF,cAAcpC,KAAK4B,EAAKU,MAAMF,cAAcD,QAAQS,MAAQE,EAE9ElB,EAAKY,SAAS,CAACmD,UAAS,kBAAI/D,EAAKqE,qBApGnBrE,EAuGlBsE,oBAAsB,SAACxD,GACnB,IAAqC,IAAlCd,EAAKU,MAAMF,cAAcpC,MAAc4B,EAAKU,MAAMuB,WAGjDnB,EAAMG,SAAW,IAAMH,EAAMG,SAAW,IAAyB,IAAlBH,EAAMG,SAAmC,KAAlBH,EAAMG,SAAe,CAC3F,IAAI8C,EAAM9E,OAAAC,EAAA,EAAAD,CAAOe,EAAKU,MAAMqD,QACxB7C,EAAWC,SAASC,OAAOC,aAAaP,EAAMG,UAC9CsD,EAAoBR,EAAO/D,EAAKU,MAAMF,cAAcpC,KAAK4B,EAAKU,MAAMF,cAAcD,QAClFiE,EAAaxE,EAAKU,MAAM8D,WAE5B,GAAGxE,EAAKU,MAAMK,cACqB,IAA5BwD,EAAkBvD,QACjBuD,EAAkBvD,MAAQ,EAC1BwD,SAGJ,CACA,GAAGD,EAAkBvD,QAAUE,EAC3B,OAEiB,IAAlBJ,EAAMG,SAAmC,KAAlBH,EAAMG,QACG,IAA5BsD,EAAkBvD,QACjBuD,EAAkBvD,MAAQ,EAC1BwD,MAIJD,EAAkBvD,MAAQE,EAC1BsD,KAIRT,EAAO/D,EAAKU,MAAMF,cAAcpC,KAAK4B,EAAKU,MAAMF,cAAcD,QAAUgE,EACxEvE,EAAKY,SAAS,CAACmD,SAAQS,cAAa,WACjBxE,EAAKqE,iBAIjBrE,EAAKU,MAAMyD,aAAanE,EAAKU,MAAM8D,aAAe,IACjDxE,EAAKyE,6BA9IHzE,EAmJlB0E,gBAAkB,SAACX,EAAQvD,EAAemE,GACtC,IAAI,IAAI1G,EAAI,EAAGA,EAAI0G,EAAY5B,UAAU5E,OAAQF,IAI7C,IAHA,IAAI2G,EAAgB3F,OAAA4F,EAAA,EAAA5F,CAAA,GAAO0F,EAAY5B,UAAU9E,IAC7C6G,EAAY7F,OAAAC,EAAA,EAAAD,CAAO8E,EAAOa,EAAiBxG,KAAKwG,EAAiBrE,QAAQwC,WAErE1E,EAAI,EAAGA,EAAIyG,EAAa3G,OAAQE,IACpC,GAAGyG,EAAazG,GAAGD,MAAQoC,EAAcpC,KACrC0G,EAAazG,GAAGkC,SAAWC,EAAcD,OAAO,CAC5CuE,EAAajG,OAAOR,EAAE,GACtB0F,EAAOa,EAAiBxG,KAAKwG,EAAiBrE,QAAQwC,UAAtD9D,OAAAC,EAAA,EAAAD,CAAsE6F,GACtE,MAKhB,OAAOf,GAlKO/D,EAqKlB+E,kBAAoB,SAAChB,EAAQvD,EAAemE,GACxC,IAAI,IAAInD,EAAI,EAAGA,EAAI,EAAGA,IACfA,IAAMhB,EAAcD,SAGnBwD,EAAOvD,EAAcpC,KAAKoD,GAAGe,WAAawB,EAAOvD,EAAcpC,KAAKoD,GAAGwB,QAAU2B,EAAY3D,QAC3F+C,EAAOvD,EAAcpC,KAAKoD,GAAGe,WAAawB,EAAOvD,EAAcpC,KAAKoD,GAAGR,QAAU2D,EAAY3D,SAC3F2D,EAAY5B,UAAUzE,KAAK,CAACF,IAAIoC,EAAcpC,IAAKmC,OAAOiB,IAC1DuC,EAAOvD,EAAcpC,KAAKoD,GAAGuB,UAAUzE,KAAKkC,IAIxD,MAAO,CAACuD,SAAQY,gBAjLF3E,EAoLlBgF,qBAAuB,SAACjB,EAAQvD,EAAemE,GAC3C,IAAI,IAAIpD,EAAI,EAAGA,EAAI,EAAGA,IACfA,IAAMf,EAAcpC,MAGnB2F,EAAOxC,GAAGf,EAAcD,QAAQgC,WAChCwB,EAAOxC,GAAGf,EAAcD,QAAQyC,QAAU2B,EAAY3D,QACpD+C,EAAOxC,GAAGf,EAAcD,QAAQgC,WAC9BwB,EAAOxC,GAAGf,EAAcD,QAAQS,QAAU2D,EAAY3D,SACtD2D,EAAY5B,UAAUzE,KAAK,CAACF,IAAKmD,EAAGhB,OAAOC,EAAcD,SACzDwD,EAAOxC,GAAGf,EAAcD,QAAQwC,UAAUzE,KAAKkC,IAI3D,MAAO,CAACuD,SAAQY,gBAlMF3E,EAqMlBiF,oBAAsB,SAAClB,EAAQvD,EAAemE,GAC1C,IAAIO,EAAUC,EAEd,OAAQ3E,EAAcpC,IAAM,GACxB,KAAK,EACD8G,EAAW1E,EAAcpC,IACzB,MACJ,KAAK,EACD8G,EAAW1E,EAAcpC,IAAM,EAC/B,MACJ,KAAK,EACD8G,EAAW1E,EAAcpC,IAAM,EAC/B,MACJ,QACI8G,GAAY,EAIpB,OAAQ1E,EAAcD,OAAS,GAC3B,KAAK,EACD4E,EAAc3E,EAAcD,OAC5B,MACJ,KAAK,EACD4E,EAAc3E,EAAcD,OAAS,EACrC,MACJ,KAAK,EACD4E,EAAc3E,EAAcD,OAAS,EACrC,MACJ,QACI4E,GAAe,EAIvB,IAAI,IAAI5D,EAAI,EAAGA,EAAI,EAAGA,IAClB,IAAI,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACtB,IAAIpD,EAAM8G,EAAW3D,EACjBhB,EAAS4E,EAAc3D,EACxBpD,IAAQoC,EAAcpC,KAAOmC,IAAWC,EAAcD,UAGrDwD,EAAO3F,GAAKmC,GAAQgC,WACpBwB,EAAO3F,GAAKmC,GAAQyC,QAAU2B,EAAY3D,QACxC+C,EAAO3F,GAAKmC,GAAQgC,WAClBwB,EAAO3F,GAAKmC,GAAQS,QAAU2D,EAAY3D,SAC1C2D,EAAY5B,UAAUzE,KAAK,CAACF,MAAKmC,WACjCwD,EAAO3F,GAAKmC,GAAQwC,UAAUzE,KAAKkC,KAKnD,MAAO,CAACuD,SAAQY,gBAvPF3E,EA0PlBqE,cAAgB,WACZ,IAAIN,EAAM9E,OAAAC,EAAA,EAAAD,CAAOe,EAAKU,MAAMqD,QACxBvD,EAAavB,OAAA4F,EAAA,EAAA5F,CAAA,GAAOe,EAAKU,MAAMF,eAC/BmE,EAAW1F,OAAA4F,EAAA,EAAA5F,CAAA,GAAO8E,EAAOvD,EAAcpC,KAAKoC,EAAcD,SAE9DwD,EAAS/D,EAAK0E,gBAAgBX,EAAQvD,EAAemE,GAGrDA,EAAY5B,UAAY,GARR,IAAAqC,EAWSpF,EAAK+E,kBAAkBhB,EAAQvD,EAAemE,GAArEZ,EAXcqB,EAWdrB,OAAQY,EAXMS,EAWNT,YAXM,IAAAU,EAcSrF,EAAKgF,qBAAqBjB,EAAQvD,EAAemE,GAAxEZ,EAdcsB,EAcdtB,OAAQY,EAdMU,EAcNV,YAdM,IAAAW,EAiBStF,EAAKiF,oBAAoBlB,EAAQvD,EAAemE,GAIzE,OAJEZ,EAjBcuB,EAiBdvB,OAAQY,EAjBMW,EAiBNX,YAEVZ,EAAOvD,EAAcpC,KAAKoC,EAAcD,QAAxCtB,OAAA4F,EAAA,EAAA5F,CAAA,GAAsD0F,GACtD3E,EAAKY,SAAS,CAACmD,WACyB,IAAjCY,EAAY5B,UAAU5E,QA/Qf6B,EAkRlB2D,QAAU,WACN,IACII,EADewB,IACO/C,IAAI,SAACpE,EAAKmD,GAChC,OAAOnD,EAAIoE,IAAI,SAAChE,EAAGgD,GACf,MAAO,CACHwB,MAAOxE,EACPwC,MAAO,EACPuB,WAAW,EACXQ,UAAW,GACXpC,QAAQ,EACRvC,IAAKmD,EACLhB,OAAQiB,OAXVgE,EAiBuBxF,EAAKgE,cAAcD,GAA/CG,EAjBKsB,EAiBLtB,WAAYC,EAjBPqB,EAiBOrB,aAEjBnE,EAAKY,SAAS,CACVmD,OAAQG,EACR1D,cAAgB,CACZpC,KAAM,EACNmC,QAAS,GAEb0B,UAAU,EACVlB,eAAe,EACfoD,eACAK,WAAY,EACZiB,WAAW,KA/SDzF,EAmTlByD,UAAY,WACRzD,EAAKY,SAAS,CAACqB,UAAU,KApTXjC,EAuTlB0D,iBAAmB,WACf1D,EAAKY,SAAS,CAACqB,UAAU,KAxTXjC,EAyUlBwD,WAAa,WACT,IAAIzC,EAAgBf,EAAKU,MAAMK,cAE/Bf,EAAKY,SAAS,CAACG,eAAgBA,KA5UjBf,EA+UlByE,uBAAyB,WAIrB,IAHA,IAAIV,EAAS/D,EAAKU,MAAMqD,OACpB0B,GAAY,EAERlE,EAAI,EAAGA,EAAIwC,EAAO5F,OAAQoD,IAAI,CAClC,IAAI,IAAIC,EAAI,EAAGA,EAAIuC,EAAOxC,GAAGpD,OAAQqD,IACjC,GAAGuC,EAAOxC,GAAGC,GAAGR,QAAU+C,EAAOxC,GAAGC,GAAGwB,MAAM,CACzCyC,GAAY,EACZ,MAGR,IAAKA,EACD,MAGRzF,EAAKY,SAAS,CAAC6E,eA3Vf,IACI1B,EADewB,IACO/C,IAAI,SAACpE,EAAKmD,GAChC,OAAOnD,EAAIoE,IAAI,SAAChE,EAAGgD,GACf,MAAO,CACHwB,MAAOxE,EACPwC,MAAO,EAEPuB,WAAW,EACXQ,UAAW,GACXpC,QAAQ,EACRvC,IAAKmD,EACLhB,OAAQiB,OAdNkE,EAmBmB1F,EAAKgE,cAAcD,GAA/CG,EAnBSwB,EAmBTxB,WAAYC,EAnBHuB,EAmBGvB,aAnBH,OAqBdnE,EAAKU,MAAQ,CACTqD,OAAQG,EAER1D,cAAgB,CACZpC,KAAM,EACNmC,QAAS,GAEb0B,UAAU,EACVlB,eAAe,EACfoD,eACAK,WAAY,EACZiB,WAAW,GAhCDzF,mFAqCd0B,SAASC,iBAAiB,UAAWzB,KAAKoE,oEAI1C5C,SAASE,oBAAoB,UAAW1B,KAAKoE,sDAwTzC,IAAAxC,EAAA5B,KACJ,OACIgC,EAAAC,EAAAC,cAAA,OAAKgB,GAAG,QACJlB,EAAAC,EAAAC,cAACkB,EAAD,CACIvC,cAAeb,KAAKQ,MAAMK,cAC1ByC,WAAYtD,KAAKsD,WACjBG,QAASzD,KAAKyD,QACdF,UAAWvD,KAAKuD,UAChBC,iBAAkBxD,KAAKwD,iBACvBzB,SAAU/B,KAAKQ,MAAMuB,SACrB0D,QAASzF,KAAKyF,UAElBzD,EAAAC,EAAAC,cAAA,OAAKgB,GAAG,aACJlB,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACKlC,KAAKQ,MAAMqD,OAAOvB,IAAI,SAACpE,EAAKH,GAAN,OACnBiE,EAAAC,EAAAC,cAAA,MAAIK,IAAKxE,GACJG,EAAIoE,IAAI,SAAChE,GAAD,OACL0D,EAAAC,EAAAC,cAACS,EAAD,CACIJ,IAAG,GAAAnD,OAAKd,EAAEJ,KAAPkB,OAAad,EAAE+B,QAClB/B,EAAGA,EACH8B,YAAawB,EAAKxB,YAClB2B,SAAUH,EAAKpB,MAAMuB,SACrBlB,cAAee,EAAKpB,MAAMK,cAC1BP,cAAesB,EAAKpB,MAAMF,uBASlD0B,EAAAC,EAAAC,cAACc,EAAD,CACIlC,OAAuC,IAAhCd,KAAKQ,MAAMF,cAAcpC,IAC5B8B,KAAKQ,MAAMqD,OAAO7D,KAAKQ,MAAMF,cAAcpC,KAAK8B,KAAKQ,MAAMF,cAAcD,QAAQS,MAAQ,EAC7FR,cAAeN,KAAKQ,MAAMF,cAC1B6C,eAAgBnD,KAAKkE,oBACrBnC,SAAU/B,KAAKQ,MAAMuB,YAI5B/B,KAAKQ,MAAM+E,WACRvD,EAAAC,EAAAC,cAACwB,EAAD,CAAiBD,QAASzD,KAAKyD,kBA7Y3BhB,IAAMC,WCLfgD,EAAA,SAAC7F,GACZ,OACImC,EAAAC,EAAAC,cAAA,OAAKgB,GAAG,eACJlB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,kCACJF,EAAAC,EAAAC,cAAA,yKAIAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,yBACJF,EAAAC,EAAAC,cAAA,wGACgGF,EAAAC,EAAAC,cAAA,4BADhG,OAC+HF,EAAAC,EAAAC,cAAA,gCAD/H,iDCTGyD,EAAA,WACX,OACI3D,EAAAC,EAAAC,cAAA,OAAKgB,GAAG,UAAR,0BAEIlB,EAAAC,EAAAC,cAAA,KAAGmB,MAAM,SAASuC,KAAK,uCAAuCC,OAAO,SAASC,IAAI,uBAAlF,cACe9D,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BCDxC4D,IAASC,OAAOhE,EAAAC,EAAAC,cCuCD,WACX,OACIF,EAAAC,EAAAC,cAAA,OAAKgB,GAAG,OACJlB,EAAAC,EAAAC,cAAA,MAAIgB,GAAG,eAAP,UACAlB,EAAAC,EAAAC,cAACwD,EAAD,MACA1D,EAAAC,EAAAC,cAAC+D,EAAD,MACAjE,EAAAC,EAAAC,cAACyD,EAAD,QD7CI,MAASnE,SAAS0E,eAAe","file":"static/js/main.a79fae7a.chunk.js","sourcesContent":["function generateSeed(){\r\n    let n = [1,2,3,4,5,6,7,8,9];\r\n    let seed = [];\r\n\r\n    while(n.length > 1){\r\n        let index = Math.floor(Math.random()*n.length);\r\n        seed.push(n[index]);\r\n        n.splice(index, 1);\r\n    }\r\n\r\n    seed.push(n[0]);\r\n\r\n    return seed;\r\n}\r\n\r\nfunction generateThreeRows(seed){\r\n    let result = [seed];\r\n    for(let i = 0; i < 2; i++){\r\n        let currentRow = result[result.length - 1];\r\n        let row = [];\r\n\r\n        for(let j = 0; j < 9; j = j+3){\r\n            if(j <= 5){\r\n                row.push(currentRow[j + 3]);\r\n                row.push(currentRow[j + 4]);\r\n                row.push(currentRow[j + 5]);\r\n            }\r\n            else{\r\n                row.push(currentRow[0]);\r\n                row.push(currentRow[1]);\r\n                row.push(currentRow[2]);\r\n            }\r\n        }\r\n        result.push(row);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction generateMatrix(){\r\n    let seed = generateSeed();    \r\n    let matrix = [];\r\n\r\n    let lastSeed = [...seed];\r\n    let currentSeed = [...seed];\r\n    for(let i = 0; i < 3; i++){\r\n        if(i > 0){\r\n            let temp = [...lastSeed];\r\n            temp.shift();\r\n            currentSeed = [...temp, lastSeed[0]];\r\n        }\r\n\r\n        let section = generateThreeRows(currentSeed);\r\n        matrix.push(section[0], section[1], section[2]);\r\n        lastSeed = [...currentSeed];\r\n    }\r\n\r\n    return matrix;\r\n}\r\n\r\nfunction mixRows(m){\r\n    let result = [];\r\n    let orders = [\r\n        [0,1,2],\r\n        [0,2,1],\r\n        [1,0,2],\r\n        [1,2,0],\r\n        [2,0,1],\r\n        [2,1,0]\r\n    ];\r\n\r\n    for(let i = 0; i < 9; i+=3){\r\n        let randomOrder = orders[Math.floor(Math.random()*orders.length)];\r\n\r\n        result.push(m[i + randomOrder[0]]);\r\n        result.push(m[i + randomOrder[1]]);\r\n        result.push(m[i + randomOrder[2]]);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction flipMatrix(m){\r\n    let result = [];\r\n    for(let i = 0; i < 9; i++){\r\n        let row = [];\r\n\r\n        for(let j = 0; j < 9; j++){\r\n            row.push(m[j][i]);\r\n        }\r\n        result.push(row);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction generateSolvedSudoku(){\r\n    let matrix = generateMatrix();\r\n    // console.log(\"Original Matrix:\\n\",matrix);\r\n\r\n    matrix = mixRows(matrix);\r\n    // console.log(\"Mixed Rows Matrix:\\n\",matrix);\r\n\r\n    matrix = flipMatrix(matrix);\r\n    // console.log(\"Flipped Matrix:\\n\",matrix);\r\n\r\n    matrix = mixRows(matrix);\r\n    // console.log(\"Mixed Rows Again Matrix:\\n\",matrix);\r\n\r\n    return matrix;\r\n}\r\n\r\nexport default generateSolvedSudoku;\r\n","import React from \"react\";\r\n// import Candidate from './Candidate';\r\n\r\nclass Candidates extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        // console.log(props.candidates);\r\n        let candidates = [];\r\n        for(let j = 0; j < 3; j++){\r\n            let row = [];\r\n            for(let i = 1; i < 4; i++){\r\n                let candidate = 3*j + i;\r\n                // console.log(candidate);\r\n                let c = {\r\n                    value: candidate,\r\n                    active: false\r\n                };\r\n                // if(props.candidates.includes(candidate))\r\n                //     c.active = true;\r\n                row.push(c);\r\n            }\r\n            candidates.push(row);\r\n        }\r\n        \r\n\r\n        this.state = {candidates};\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.addEventListener('keydown', this.toggleClassKeyPress);\r\n        // this.resetCandidates();\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        document.removeEventListener('keydown', this.toggleClassKeyPress);\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(this.props.currentActive.row === -1 &&\r\n            this.props.currentActive.column === -1){\r\n                if(prevProps.currentActive.row !== this.props.currentActive.row &&\r\n                    prevProps.currentActive.column !== this.props.currentActive.row)\r\n                    this.resetCandidates();\r\n            }\r\n    }\r\n\r\n    toggleClass = (row, column)=>{\r\n        if(this.props.currentActive.row === this.props.row &&\r\n            this.props.currentActive.column === this.props.column){        \r\n            let candidates = [...this.state.candidates];\r\n\r\n            let active = !candidates[row][column].active;\r\n\r\n            candidates[row][column].active = active;\r\n\r\n            this.setState({candidates});\r\n        }\r\n    }\r\n\r\n    toggleClassKeyPress = (event)=>{\r\n        if(!this.props.candidateMode)\r\n            return;\r\n\r\n        if((this.props.row !== this.props.currentActive.row) || (this.props.column !== this.props.currentActive.column))\r\n            return;\r\n        \r\n        if(this.props.guess === 0 && (event.keyCode === 8 || event.keyCode === 46)){\r\n            let candidates = [...this.state.candidates];\r\n            for(let i = 0; i < candidates.length; i++){\r\n                for(let j = 0; j < candidates[i].length; j++){\r\n                    candidates[i][j].active = false;\r\n                }\r\n            }\r\n            this.setState({candidates});\r\n        }\r\n\r\n        if(event.keyCode >= 49 && event.keyCode <= 57){\r\n            let inputNum = parseInt(String.fromCharCode(event.keyCode));\r\n            let candidates = [...this.state.candidates];\r\n            switch (inputNum) {\r\n                case 1 :\r\n                    candidates[0][0].active = !candidates[0][0].active;\r\n                    break;\r\n                case 2 :\r\n                    candidates[0][1].active = !candidates[0][1].active;\r\n                    break;\r\n                case 3 :\r\n                    candidates[0][2].active = !candidates[0][2].active;\r\n                    break;\r\n                case 4 :\r\n                    candidates[1][0].active = !candidates[1][0].active;\r\n                    break;\r\n                case 5 :\r\n                    candidates[1][1].active = !candidates[1][1].active;\r\n                    break;\r\n                case 6 :\r\n                    candidates[1][2].active = !candidates[1][2].active;\r\n                    break;\r\n                case 7 :\r\n                    candidates[2][0].active = !candidates[2][0].active;\r\n                    break;\r\n                case 8 :\r\n                    candidates[2][1].active = !candidates[2][1].active;\r\n                    break;\r\n                case 9 :\r\n                    candidates[2][2].active = !candidates[2][2].active;\r\n                    break;\r\n                default: \r\n                    break;\r\n            }\r\n\r\n            this.setState({candidates});\r\n        }\r\n    }\r\n\r\n    resetCandidates = ()=>{\r\n        //alert(\"hi\");\r\n        let candidates = [...this.state.candidates];\r\n\r\n        for(let r = 0; r < 3; r++){\r\n            for(let c = 0; c < 3; c++){\r\n                candidates[r][c].active = false;\r\n            }\r\n        }\r\n\r\n        this.setState({candidates});\r\n    }\r\n\r\n    render(){\r\n        let candidateStyle = {};\r\n        if(!this.props.display || this.props.revealed)\r\n            candidateStyle = {\r\n                display: 'none'\r\n            };\r\n        \r\n        return(\r\n            <div className=\"candidates\" style={candidateStyle}>\r\n                {!this.props.prefilled &&\r\n                    <table>\r\n                        <tbody>\r\n                            {this.state.candidates.map((r,i)=>(\r\n                                <tr key={`${this.props.row}${this.props.column}row${i}`}>\r\n                                    {r.map((c, j)=>(\r\n                                        <td className={this.state.candidates[i][j].active ? 'activeCandidate' : ''} \r\n                                            key={`${this.props.row}${this.props.column}column${j}`} \r\n                                            onClick={()=>this.toggleClass(i, j)}\r\n                                        >\r\n                                            {c.value}\r\n                                        </td>\r\n                                    ))}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Candidates;\r\n","import React from \"react\";\r\nimport Candidates from \"./Candidates\";\r\n\r\nexport default (props)=>{\r\n    let cellstyle = 'cell';\r\n\r\n    if(props.n.active)\r\n        cellstyle+=' active';\r\n\r\n    if(props.n.conflicts.length !== 0 && !props.revealed)\r\n        cellstyle+=' conflict';\r\n\r\n    if(props.n.prefilled || props.n.guess!==0 || props.revealed)\r\n        cellstyle+=' digit';\r\n    \r\n    return(\r\n        <td className={props.n.prefilled ? 'inactive' : ''} key={`${props.n.row}${props.n.column}`}>\r\n            <div className={cellstyle} onClick={()=>props.toggleClass(props.n)}>\r\n                {/* {props.n.prefilled && props.n.digit} */}\r\n                {/* {!props.n.prefilled && props.n.guess!==0 && */}\r\n                    <div className=\"entry\">\r\n                        {props.n.prefilled && props.n.digit}\r\n                        {props.n.guess!==0 && !props.revealed && props.n.guess}\r\n                        {!props.n.prefilled && props.revealed && props.n.digit}\r\n                    </div>\r\n                {/* } */}\r\n                {/* {!props.n.prefilled && (props.n.guess === 0) && */}\r\n                    <Candidates \r\n                        // gridPosition={`${props.n.row}${props.n.column}`}\r\n                        guess={props.n.guess}\r\n                        row={props.n.row}\r\n                        column={props.n.column}\r\n                        prefilled={props.n.prefilled}\r\n                        // candidates={props.n.candidates}\r\n                        display={props.n.guess === 0}\r\n                        currentActive={props.currentActive}\r\n                        candidateMode={props.candidateMode}\r\n                        revealed={props.revealed}\r\n                    />\r\n                {/* } */}\r\n            </div>\r\n        </td>\r\n    );\r\n};","import React from \"react\";\r\n\r\nexport default (props) => {\r\n    let inputNumClass = 'inputNum';\r\n\r\n    if(props.currentActive.row === -1)\r\n        inputNumClass += \" inactive\";\r\n\r\n    if(props.revealed)\r\n        inputNumClass += \" inactive\";\r\n\r\n    let inputNums = [1,2,3,4,5,6,7,8,9];\r\n    \r\n    return (\r\n        <div id=\"inputOptions\">\r\n            {inputNums.map(n=>(\r\n                <div key={n} \r\n                    className={props.guess===n ? `${inputNumClass} entered` : inputNumClass} \r\n                    onClick={()=>props.handleInputNum(n)}>\r\n                    {n}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default (props)=>{\r\n    return (\r\n        <div id='toolbar'>\r\n            {props.candidateMode && \r\n                <div className='entryMode' title='Switch to Entry Mode' onClick={()=>props.switchMode()}>\r\n                    <i className=\"material-icons\">looks_one</i>\r\n                    <div>Switch to Entry Mode</div>\r\n                </div>\r\n            }\r\n            {!props.candidateMode && \r\n                <div className='entryMode' title='Switch to Candidate Mode' onClick={()=>props.switchMode()}>\r\n                    <i className=\"material-icons\">grid_on</i>\r\n                    <div>\r\n                        Switch to Candidate Mode\r\n                    </div>\r\n                </div>\r\n            }\r\n            {/* <button className='restart' onClick={()=>{props.restart()}}>Restart</button> */}\r\n            {!props.revealed && \r\n                <button className='revealall' onClick={()=>props.revealAll()}>Reveal all</button>\r\n            }\r\n            {props.revealed &&\r\n                <button className='back2answer' onClick={()=>props.backToYourAnswer()}>Back to your answer</button>\r\n            }\r\n            <button className='newgame' onClick={()=>props.newGame()}>New game</button>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport default (props)=>{\r\n    return (\r\n        <div id=\"sudokuCompleted\">\r\n            hello world\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport sudokuGenerator from '../sudokuGenerator';\r\nimport Grid from \"./Grid/Grid\";\r\nimport InputOptions from './Grid/InputOptions';\r\nimport Toolbar from './Toolbar';\r\nimport SudokuCompleted from './SudokuCompleted';\r\n\r\nclass GameBoard extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        let solvedSudoku = sudokuGenerator();\r\n        let sudoku = solvedSudoku.map((row, r)=>{\r\n            return row.map((n, c)=>{\r\n                return {\r\n                    digit: n,\r\n                    guess: 0,\r\n                    // candidates: [],\r\n                    prefilled: true,\r\n                    conflicts: [],\r\n                    active: false,\r\n                    row: r,\r\n                    column: c\r\n                };\r\n            });\r\n        });\r\n\r\n        let {sudoku_new, numPrefilled} = this.removeNumbers(sudoku);\r\n\r\n        this.state = {\r\n            sudoku: sudoku_new,\r\n            //currentActive : null\r\n            currentActive : {\r\n                row: -1,\r\n                column: -1\r\n            },\r\n            revealed: false,\r\n            candidateMode: false,\r\n            numPrefilled,\r\n            numGuessed: 0,\r\n            completed: false\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.addEventListener('keydown', this.handleInputKeyPress);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        document.removeEventListener('keydown', this.handleInputKeyPress);\r\n    }\r\n\r\n    toggleClass = (cell) =>{\r\n        if(cell.prefilled)\r\n            return;\r\n\r\n        let sudoku = [...this.state.sudoku];\r\n        sudoku[cell.row][cell.column].active = true;\r\n\r\n        if(this.state.currentActive.row === -1){\r\n            this.setState({\r\n                currentActive: {row: cell.row, column: cell.column},\r\n                sudoku\r\n            });\r\n        }\r\n        else if(cell.row === this.state.currentActive.row && cell.column === this.state.currentActive.column)\r\n            return;\r\n        else{\r\n            sudoku[this.state.currentActive.row][this.state.currentActive.column].active = false;\r\n            this.setState({\r\n                currentActive: {row: cell.row, column: cell.column},\r\n                sudoku\r\n            });\r\n        }\r\n    }\r\n\r\n    removeNumbers = (sudoku) => {\r\n        let num_prefilled = 81;\r\n\r\n        for(let i = 0; i < 9; i++){\r\n            for(let j = 0; j < 9; j++){\r\n                if(num_prefilled > 23 && Math.random() > (23/81)){\r\n                    sudoku[i][j].prefilled = false;\r\n                    num_prefilled--;\r\n                }\r\n\r\n                if(num_prefilled <= 17)\r\n                    break;\r\n            }\r\n            if(num_prefilled <= 17)\r\n                break;\r\n        }\r\n\r\n        return {sudoku_new: sudoku, numPrefilled: num_prefilled};\r\n    }\r\n\r\n    // for number pad, but now it's not available\r\n    handleInputNumClick = (inputNum) => {\r\n        if(this.state.currentActive.row === -1 || this.state.revealed)\r\n            return;\r\n\r\n        let sudoku = [...this.state.sudoku];\r\n\r\n        if(sudoku[this.state.currentActive.row][this.state.currentActive.column].guess === inputNum)\r\n            return;\r\n\r\n        sudoku[this.state.currentActive.row][this.state.currentActive.column].guess = inputNum;\r\n\r\n        this.setState({sudoku}, ()=>this.checkConflict());\r\n    }\r\n\r\n    handleInputKeyPress = (event)=>{\r\n        if(this.state.currentActive.row === -1 || this.state.revealed)\r\n            return;\r\n\r\n        if((event.keyCode >= 49 && event.keyCode <= 57) || event.keyCode === 8 || event.keyCode === 46){\r\n            let sudoku = [...this.state.sudoku];\r\n            let inputNum = parseInt(String.fromCharCode(event.keyCode));\r\n            let currentActiveCell = sudoku[this.state.currentActive.row][this.state.currentActive.column];\r\n            let numGuessed = this.state.numGuessed;\r\n\r\n            if(this.state.candidateMode){\r\n                if(currentActiveCell.guess !== 0){\r\n                    currentActiveCell.guess = 0;\r\n                    numGuessed--;\r\n                }\r\n            }\r\n            else{\r\n                if(currentActiveCell.guess === inputNum)\r\n                    return;\r\n\r\n                if(event.keyCode === 8 || event.keyCode === 46){\r\n                    if(currentActiveCell.guess !== 0){\r\n                        currentActiveCell.guess = 0;\r\n                        numGuessed--;\r\n                    }\r\n                }\r\n                else {\r\n                    currentActiveCell.guess = inputNum;\r\n                    numGuessed++;\r\n                }\r\n            }\r\n\r\n            sudoku[this.state.currentActive.row][this.state.currentActive.column] = currentActiveCell;\r\n            this.setState({sudoku, numGuessed}, ()=> {\r\n                let conflict = this.checkConflict();\r\n                if(conflict)\r\n                    return;\r\n\r\n                if(this.state.numPrefilled+this.state.numGuessed === 81)\r\n                    this.checkIfCompletedSudoku();\r\n            });\r\n        }\r\n    }\r\n\r\n    updateConflicts = (sudoku, currentActive, currentGrid) => {\r\n        for(let i = 0; i < currentGrid.conflicts.length; i++){\r\n            let conflictPosition = {...currentGrid.conflicts[i]};\r\n            let conflictList = [...sudoku[conflictPosition.row][conflictPosition.column].conflicts];\r\n\r\n            for(let j = 0; j < conflictList.length; j++){\r\n                if(conflictList[j].row === currentActive.row && \r\n                    conflictList[j].column === currentActive.column){\r\n                        conflictList.splice(j,1);\r\n                        sudoku[conflictPosition.row][conflictPosition.column].conflicts = [...conflictList];\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return sudoku;\r\n    }\r\n\r\n    checkRowConflicts = (sudoku, currentActive, currentGrid) => {\r\n        for(let c = 0; c < 9; c++){\r\n            if(c === currentActive.column)\r\n                continue;\r\n\r\n            if((sudoku[currentActive.row][c].prefilled && sudoku[currentActive.row][c].digit === currentGrid.guess) || \r\n                (!sudoku[currentActive.row][c].prefilled && sudoku[currentActive.row][c].guess === currentGrid.guess)){\r\n                    currentGrid.conflicts.push({row:currentActive.row, column:c});\r\n                    sudoku[currentActive.row][c].conflicts.push(currentActive);\r\n                }\r\n        }\r\n\r\n        return {sudoku, currentGrid};\r\n    }\r\n\r\n    checkColumnConflicts = (sudoku, currentActive, currentGrid) => {\r\n        for(let r = 0; r < 9; r++){\r\n            if(r === currentActive.row)\r\n                continue;\r\n\r\n            if((sudoku[r][currentActive.column].prefilled && \r\n                sudoku[r][currentActive.column].digit === currentGrid.guess) || \r\n                (!sudoku[r][currentActive.column].prefilled &&\r\n                    sudoku[r][currentActive.column].guess === currentGrid.guess)){\r\n                    currentGrid.conflicts.push({row: r, column:currentActive.column});\r\n                    sudoku[r][currentActive.column].conflicts.push(currentActive);\r\n                }\r\n        }\r\n\r\n        return {sudoku, currentGrid};\r\n    }\r\n\r\n    checkNonetConflicts = (sudoku, currentActive, currentGrid) => {\r\n        let startRow, startColumn;\r\n\r\n        switch (currentActive.row % 3){\r\n            case 0:\r\n                startRow = currentActive.row;\r\n                break;\r\n            case 1:\r\n                startRow = currentActive.row - 1;\r\n                break;\r\n            case 2:\r\n                startRow = currentActive.row - 2;\r\n                break;\r\n            default:\r\n                startRow = -1;\r\n                break;\r\n        }\r\n\r\n        switch (currentActive.column % 3){\r\n            case 0:\r\n                startColumn = currentActive.column;\r\n                break;\r\n            case 1:\r\n                startColumn = currentActive.column - 1;\r\n                break;\r\n            case 2:\r\n                startColumn = currentActive.column - 2;\r\n                break;\r\n            default:\r\n                startColumn = -1;\r\n                break;\r\n        }\r\n\r\n        for(let r = 0; r < 3; r++){\r\n            for(let c = 0; c < 3; c++){\r\n                let row = startRow + r;\r\n                let column = startColumn + c;\r\n                if(row === currentActive.row || column === currentActive.column)\r\n                    continue;\r\n\r\n                if((sudoku[row][column].prefilled && \r\n                    sudoku[row][column].digit === currentGrid.guess) || \r\n                    (!sudoku[row][column].prefilled &&\r\n                        sudoku[row][column].guess === currentGrid.guess)){\r\n                        currentGrid.conflicts.push({row, column});\r\n                        sudoku[row][column].conflicts.push(currentActive);\r\n                    }\r\n            }\r\n        }\r\n\r\n        return {sudoku, currentGrid};\r\n    }\r\n\r\n    checkConflict = ()=>{\r\n        let sudoku = [...this.state.sudoku];\r\n        let currentActive = {...this.state.currentActive};\r\n        let currentGrid = {...sudoku[currentActive.row][currentActive.column]};\r\n\r\n        sudoku = this.updateConflicts(sudoku, currentActive, currentGrid);\r\n\r\n        // reset conflicts for new input\r\n        currentGrid.conflicts = [];\r\n\r\n        //row\r\n        ({sudoku, currentGrid} = this.checkRowConflicts(sudoku, currentActive, currentGrid));\r\n\r\n        //column\r\n        ({sudoku, currentGrid} = this.checkColumnConflicts(sudoku, currentActive, currentGrid));\r\n\r\n        //nonet\r\n        ({sudoku, currentGrid} = this.checkNonetConflicts(sudoku, currentActive, currentGrid));\r\n\r\n        sudoku[currentActive.row][currentActive.column] = {...currentGrid};\r\n        this.setState({sudoku});\r\n        return currentGrid.conflicts.length === 0;\r\n    }\r\n\r\n    newGame = ()=>{\r\n        let solvedSudoku = sudokuGenerator();\r\n        let sudoku = solvedSudoku.map((row, r)=>{\r\n            return row.map((n, c)=>{\r\n                return {\r\n                    digit: n,\r\n                    guess: 0,\r\n                    prefilled: true,\r\n                    conflicts: [],\r\n                    active: false,\r\n                    row: r,\r\n                    column: c\r\n                };\r\n            });\r\n        });\r\n\r\n        // sudoku = this.removeNumbers(sudoku);\r\n        let {sudoku_new, numPrefilled} = this.removeNumbers(sudoku);\r\n\r\n        this.setState({\r\n            sudoku: sudoku_new, \r\n            currentActive : {\r\n                row: -1,\r\n                column: -1\r\n            },\r\n            revealed: false,\r\n            candidateMode: false,\r\n            numPrefilled,\r\n            numGuessed: 0,\r\n            completed: false\r\n        });\r\n    }\r\n\r\n    revealAll = ()=>{\r\n        this.setState({revealed: true});\r\n    }\r\n\r\n    backToYourAnswer = ()=>{\r\n        this.setState({revealed: false});\r\n    }\r\n\r\n    // restart = ()=>{\r\n    //     let sudoku = [...this.state.sudoku];\r\n\r\n    //     sudoku = sudoku.map(r=>{\r\n    //         return r.map(n=>{\r\n    //             n.conflicts = [];\r\n    //             n.guess = 0;\r\n    //             return n;\r\n    //         });\r\n    //     });\r\n        \r\n    //     this.setState({sudoku});\r\n    // }\r\n\r\n    switchMode = ()=> {\r\n        let candidateMode = this.state.candidateMode;\r\n\r\n        this.setState({candidateMode: !candidateMode});\r\n    }\r\n\r\n    checkIfCompletedSudoku = () => {\r\n        let sudoku = this.state.sudoku;\r\n        let completed = true;\r\n\r\n        for(let r = 0; r < sudoku.length; r++){\r\n            for(let c = 0; c < sudoku[r].length; c++){\r\n                if(sudoku[r][c].guess !== sudoku[r][c].digit){\r\n                    completed = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (!completed)\r\n                break;\r\n        }\r\n        \r\n        this.setState({completed});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id='game'>\r\n                <Toolbar \r\n                    candidateMode={this.state.candidateMode}\r\n                    switchMode={this.switchMode}\r\n                    newGame={this.newGame} \r\n                    revealAll={this.revealAll} \r\n                    backToYourAnswer={this.backToYourAnswer}\r\n                    revealed={this.state.revealed}\r\n                    restart={this.restart}\r\n                />\r\n                <div id=\"gameboard\">\r\n                    <table>\r\n                        <tbody>\r\n                            {this.state.sudoku.map((row, i)=>(\r\n                                <tr key={i}>\r\n                                    {row.map((n)=>(\r\n                                        <Grid \r\n                                            key={`${n.row}${n.column}`} \r\n                                            n={n} \r\n                                            toggleClass={this.toggleClass}\r\n                                            revealed={this.state.revealed}\r\n                                            candidateMode={this.state.candidateMode}\r\n                                            currentActive={this.state.currentActive}\r\n                                            // revealed={this.state.revealed}\r\n                                        />\r\n                                    ))}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <InputOptions \r\n                        guess={this.state.currentActive.row!==-1 ? \r\n                            this.state.sudoku[this.state.currentActive.row][this.state.currentActive.column].guess : 0}\r\n                        currentActive={this.state.currentActive} \r\n                        handleInputNum={this.handleInputNumClick}\r\n                        revealed={this.state.revealed}\r\n                    />\r\n                </div>\r\n\r\n                {this.state.completed && \r\n                    <SudokuCompleted newGame={this.newGame} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameBoard;","import React from \"react\";\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div id='instruction'>\r\n            <h3><u>Classic Sudoku Rules</u></h3>\r\n            <p>\r\n                There are 9 rows, 9 columns, and 9 3x3 blocks. \r\n                Fill in the empty cells with the numbers 1-9, without repeating any numbers within the row, column, or block.\r\n            </p>\r\n            <h3><u>How to Play</u></h3>\r\n            <p>\r\n                Click on each empty cell, enter your guess or candidates with keyboard by switching between <strong>Entry Mode</strong> or <strong>Candidate Mode</strong>. \r\n                Hit Backspace or Delete to clear entries.\r\n            </p>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport default ()=>{\r\n    return (\r\n        <div id='footer'>\r\n            Web Sudoku &copy;2019&nbsp;\r\n            <a title=\"Github\" href=\"https://github.com/huwu55/Web-Sudoku\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                Huiling Wu <i className=\"fab fa-github\"></i>\r\n            </a>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./style/style.css\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));","import React from \"react\";\r\n// import sudokuGenerator from './sudokuGenerator';\r\nimport GameBoard from './components/GameBoard';\r\nimport Instruction from './components/Instruction';\r\n// import Toolbar from './components/Toolbar';\r\nimport Footer from './components/Footer';\r\nimport \"./style/style.css\";\r\n\r\n\r\n// class Sudoku extends React.Component {\r\n//     constructor(){\r\n//         super();\r\n\r\n//         // let solvedSudoku = sudokuGenerator();\r\n\r\n//         // this.state = {\r\n//         //     solvedSudoku,\r\n//         //     revealAll: false\r\n//         // }\r\n//     }\r\n\r\n//     // newGame = ()=>{\r\n//     //     // console.log(\"hello\");\r\n//     //     let solvedSudoku = sudokuGenerator();\r\n//     //     this.setState({solvedSudoku});\r\n//     //     console.log(solvedSudoku);\r\n//     // }\r\n\r\n//     // revealAll = ()=>{}\r\n\r\n//     render(){\r\n//         return(\r\n//             <div id='app'>\r\n//                 <Instruction />\r\n//                 <GameBoard />\r\n//                 {/* <Toolbar newGame={this.newGame} /> */}\r\n//             </div>\r\n//         );\r\n//     }\r\n\r\n// }\r\n\r\n// export default Sudoku;\r\n\r\n\r\nexport default ()=>{\r\n    return (\r\n        <div id='app'>\r\n            <h1 id='sudokuTitle'>SUDOKU</h1>\r\n            <Instruction />\r\n            <GameBoard />\r\n            <Footer/>\r\n        </div>\r\n    );\r\n}"],"sourceRoot":""}
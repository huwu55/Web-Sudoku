{"version":3,"sources":["sudokuGenerator.js","components/Grid/Grid.js","components/Grid/InputOptions.js","components/Toolbar.js","components/GameBoard.js","components/Instruction.js","components/Footer.js","index.js","App.js"],"names":["generateThreeRows","seed","result","i","currentRow","length","row","j","push","generateMatrix","n","index","Math","floor","random","splice","generateSeed","matrix","lastSeed","Object","toConsumableArray","currentSeed","temp","shift","concat","section","mixRows","m","orders","randomOrder","generateSolvedSudoku","flipMatrix","Grid","props","cellstyle","active","conflicts","revealed","react_default","a","createElement","className","prefilled","key","column","onClick","toggleClass","digit","guess","InputOptions","inputNumClass","currentActive","id","map","handleInputNum","Toolbar","restart","revealAll","backToYourAnswer","newGame","GameBoard","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cell","sudoku","state","setState","removeNumbers","num_prefilled","handleInputNumClick","inputNum","checkConflict","handleInputKeyPress","event","keyCode","parseInt","String","fromCharCode","updateConflicts","currentGrid","conflictPosition","objectSpread","conflictList","checkRowConflicts","c","checkColumnConflicts","r","checkNonetConflicts","startRow","startColumn","_this$checkRowConflic","_this$checkColumnConf","_this$checkNonetConfl","sudokuGenerator","document","addEventListener","removeEventListener","_this2","React","Component","Instruction","Footer","title","href","target","ReactDOM","render","components_GameBoard","getElementById"],"mappings":"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","file":"static/js/main.2fa1f562.chunk.js","sourcesContent":["function generateSeed(){\r\n    let n = [1,2,3,4,5,6,7,8,9];\r\n    let seed = [];\r\n\r\n    while(n.length > 1){\r\n        let index = Math.floor(Math.random()*n.length);\r\n        seed.push(n[index]);\r\n        n.splice(index, 1);\r\n    }\r\n\r\n    seed.push(n[0]);\r\n\r\n    return seed;\r\n}\r\n\r\nfunction generateThreeRows(seed){\r\n    let result = [seed];\r\n    for(let i = 0; i < 2; i++){\r\n        let currentRow = result[result.length - 1];\r\n        let row = [];\r\n\r\n        for(let j = 0; j < 9; j = j+3){\r\n            if(j <= 5){\r\n                row.push(currentRow[j + 3]);\r\n                row.push(currentRow[j + 4]);\r\n                row.push(currentRow[j + 5]);\r\n            }\r\n            else{\r\n                row.push(currentRow[0]);\r\n                row.push(currentRow[1]);\r\n                row.push(currentRow[2]);\r\n            }\r\n        }\r\n        result.push(row);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction generateMatrix(){\r\n    let seed = generateSeed();    \r\n    let matrix = [];\r\n\r\n    let lastSeed = [...seed];\r\n    let currentSeed = [...seed];\r\n    for(let i = 0; i < 3; i++){\r\n        if(i > 0){\r\n            let temp = [...lastSeed];\r\n            temp.shift();\r\n            currentSeed = [...temp, lastSeed[0]];\r\n        }\r\n\r\n        let section = generateThreeRows(currentSeed);\r\n        matrix.push(section[0], section[1], section[2]);\r\n        lastSeed = [...currentSeed];\r\n    }\r\n\r\n    return matrix;\r\n}\r\n\r\nfunction mixRows(m){\r\n    let result = [];\r\n    let orders = [\r\n        [0,1,2],\r\n        [0,2,1],\r\n        [1,0,2],\r\n        [1,2,0],\r\n        [2,0,1],\r\n        [2,1,0]\r\n    ];\r\n\r\n    for(let i = 0; i < 9; i+=3){\r\n        let randomOrder = orders[Math.floor(Math.random()*orders.length)];\r\n\r\n        result.push(m[i + randomOrder[0]]);\r\n        result.push(m[i + randomOrder[1]]);\r\n        result.push(m[i + randomOrder[2]]);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction flipMatrix(m){\r\n    let result = [];\r\n    for(let i = 0; i < 9; i++){\r\n        let row = [];\r\n\r\n        for(let j = 0; j < 9; j++){\r\n            row.push(m[j][i]);\r\n        }\r\n        result.push(row);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction generateSolvedSudoku(){\r\n    let matrix = generateMatrix();\r\n    // console.log(\"Original Matrix:\\n\",matrix);\r\n\r\n    matrix = mixRows(matrix);\r\n    // console.log(\"Mixed Rows Matrix:\\n\",matrix);\r\n\r\n    matrix = flipMatrix(matrix);\r\n    // console.log(\"Flipped Matrix:\\n\",matrix);\r\n\r\n    matrix = mixRows(matrix);\r\n    // console.log(\"Mixed Rows Again Matrix:\\n\",matrix);\r\n\r\n    return matrix;\r\n}\r\n\r\nexport default generateSolvedSudoku;\r\n","import React from \"react\";\r\n\r\nexport default (props)=>{\r\n    let cellstyle = 'cell';\r\n\r\n    if(props.n.active)\r\n        cellstyle+=' active';\r\n\r\n    if(props.n.conflicts.length !== 0 && !props.revealed)\r\n        cellstyle+=' conflict';\r\n    \r\n    return(\r\n        <td className={props.n.prefilled ? 'inactive' : ''} key={`${props.n.row}${props.n.column}`}>\r\n            <div className={cellstyle} onClick={()=>props.toggleClass(props.n)}>\r\n                {props.n.prefilled && props.n.digit}\r\n                {props.n.guess!==0 && !props.revealed && props.n.guess}\r\n                {!props.n.prefilled && props.revealed && props.n.digit}\r\n            </div>\r\n        </td>\r\n    );\r\n};","import React from \"react\";\r\n\r\nexport default (props) => {\r\n    let inputNumClass = 'inputNum';\r\n\r\n    if(props.currentActive.row === -1)\r\n        inputNumClass += \" inactive\";\r\n\r\n    if(props.revealed)\r\n        inputNumClass += \" inactive\";\r\n\r\n    let inputNums = [1,2,3,4,5,6,7,8,9];\r\n    \r\n    return (\r\n        <div id=\"inputOptions\">\r\n            {inputNums.map(n=>(\r\n                <div key={n} \r\n                    className={props.guess===n ? `${inputNumClass} entered` : inputNumClass} \r\n                    onClick={()=>props.handleInputNum(n)}>\r\n                    {n}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default (props)=>{\r\n    return (\r\n        <div id='toolbar'>\r\n            <button className='restart' onClick={()=>{props.restart()}}>Restart</button>\r\n            {!props.revealed && \r\n                <button className='revealall' onClick={()=>props.revealAll()}>Reveal all</button>\r\n            }\r\n            {props.revealed &&\r\n                <button className='back2answer' onClick={()=>props.backToYourAnswer()}>Go back to your answer</button>\r\n            }\r\n            <button className='newgame' onClick={()=>props.newGame()}>New game</button>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport sudokuGenerator from '../sudokuGenerator';\r\nimport Grid from \"./Grid/Grid\";\r\nimport InputOptions from './Grid/InputOptions';\r\nimport Toolbar from './Toolbar';\r\n\r\nclass GameBoard extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        let solvedSudoku = sudokuGenerator();\r\n        let sudoku = solvedSudoku.map((row, r)=>{\r\n            return row.map((n, c)=>{\r\n                return {\r\n                    digit: n,\r\n                    guess: 0,\r\n                    prefilled: true,\r\n                    conflicts: [],\r\n                    active: false,\r\n                    row: r,\r\n                    column: c\r\n                };\r\n            });\r\n        });\r\n\r\n        sudoku = this.removeNumbers(sudoku);\r\n\r\n        this.state = {\r\n            sudoku,\r\n            //currentActive : null\r\n            currentActive : {\r\n                row: -1,\r\n                column: -1\r\n            },\r\n            revealed: false\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.addEventListener('keydown', this.handleInputKeyPress);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        document.removeEventListener('keydown', this.handleInputKeyPress);\r\n    }\r\n\r\n    toggleClass = (cell) =>{\r\n        if(cell.prefilled)\r\n            return;\r\n\r\n        let sudoku = [...this.state.sudoku];\r\n        sudoku[cell.row][cell.column].active = true;\r\n\r\n        if(this.state.currentActive.row === -1){\r\n            this.setState({\r\n                currentActive: {row: cell.row, column: cell.column},\r\n                sudoku\r\n            });\r\n        }\r\n        else if(cell.row === this.state.currentActive.row && cell.column === this.state.currentActive.column)\r\n            return;\r\n        else{\r\n            sudoku[this.state.currentActive.row][this.state.currentActive.column].active = false;\r\n            this.setState({\r\n                currentActive: {row: cell.row, column: cell.column},\r\n                sudoku\r\n            });\r\n        }\r\n    }\r\n\r\n    removeNumbers = (sudoku) => {\r\n        // .21\r\n        let num_prefilled = 81;\r\n\r\n        for(let i = 0; i < 9; i++){\r\n            for(let j = 0; j < 9; j++){\r\n                if(num_prefilled > 22 && Math.random() > (22/81)){\r\n                    sudoku[i][j].prefilled = false;\r\n                    num_prefilled--;\r\n                }\r\n\r\n                if(num_prefilled <= 17)\r\n                    break;\r\n            }\r\n            if(num_prefilled <= 17)\r\n                break;\r\n        }\r\n\r\n        return sudoku;\r\n    }\r\n\r\n    handleInputNumClick = (inputNum) => {\r\n        if(this.state.currentActive.row === -1 || this.state.revealed)\r\n            return;\r\n\r\n        let sudoku = [...this.state.sudoku];\r\n\r\n        if(sudoku[this.state.currentActive.row][this.state.currentActive.column].guess === inputNum)\r\n            return;\r\n\r\n        sudoku[this.state.currentActive.row][this.state.currentActive.column].guess = inputNum;\r\n\r\n        this.setState({sudoku}, ()=>this.checkConflict());\r\n    }\r\n\r\n    handleInputKeyPress = (event)=>{\r\n        if(this.state.currentActive.row === -1 || this.state.revealed)\r\n            return;\r\n\r\n        if((event.keyCode >= 49 && event.keyCode <= 57) || event.keyCode === 8 || event.keyCode === 46){\r\n            let sudoku = [...this.state.sudoku];\r\n            let inputNum = parseInt(String.fromCharCode(event.keyCode));\r\n\r\n            if(sudoku[this.state.currentActive.row][this.state.currentActive.column].guess === inputNum)\r\n                return;\r\n\r\n            if(event.keyCode === 8 || event.keyCode === 46)\r\n                sudoku[this.state.currentActive.row][this.state.currentActive.column].guess = 0;\r\n            else \r\n                sudoku[this.state.currentActive.row][this.state.currentActive.column].guess = inputNum;\r\n            this.setState({sudoku}, ()=>this.checkConflict());\r\n        }\r\n    }\r\n\r\n    updateConflicts = (sudoku, currentActive, currentGrid) => {\r\n        for(let i = 0; i < currentGrid.conflicts.length; i++){\r\n            let conflictPosition = {...currentGrid.conflicts[i]};\r\n            let conflictList = [...sudoku[conflictPosition.row][conflictPosition.column].conflicts];\r\n\r\n            for(let j = 0; j < conflictList.length; j++){\r\n                if(conflictList[j].row === currentActive.row && \r\n                    conflictList[j].column === currentActive.column){\r\n                        conflictList.splice(j,1);\r\n                        sudoku[conflictPosition.row][conflictPosition.column].conflicts = [...conflictList];\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return sudoku;\r\n    }\r\n\r\n    checkRowConflicts = (sudoku, currentActive, currentGrid) => {\r\n        for(let c = 0; c < 9; c++){\r\n            if(c === currentActive.column)\r\n                continue;\r\n\r\n            if((sudoku[currentActive.row][c].prefilled && sudoku[currentActive.row][c].digit === currentGrid.guess) || \r\n                (!sudoku[currentActive.row][c].prefilled && sudoku[currentActive.row][c].guess === currentGrid.guess)){\r\n                    currentGrid.conflicts.push({row:currentActive.row, column:c});\r\n                    sudoku[currentActive.row][c].conflicts.push(currentActive);\r\n                }\r\n        }\r\n\r\n        return {sudoku, currentGrid};\r\n    }\r\n\r\n    checkColumnConflicts = (sudoku, currentActive, currentGrid) => {\r\n        for(let r = 0; r < 9; r++){\r\n            if(r === currentActive.row)\r\n                continue;\r\n\r\n            if((sudoku[r][currentActive.column].prefilled && \r\n                sudoku[r][currentActive.column].digit === currentGrid.guess) || \r\n                (!sudoku[r][currentActive.column].prefilled &&\r\n                    sudoku[r][currentActive.column].guess === currentGrid.guess)){\r\n                    currentGrid.conflicts.push({row: r, column:currentActive.column});\r\n                    sudoku[r][currentActive.column].conflicts.push(currentActive);\r\n                }\r\n        }\r\n\r\n        return {sudoku, currentGrid};\r\n    }\r\n\r\n    checkNonetConflicts = (sudoku, currentActive, currentGrid) => {\r\n        let startRow, startColumn;\r\n\r\n        switch (currentActive.row % 3){\r\n            case 0:\r\n                startRow = currentActive.row;\r\n                break;\r\n            case 1:\r\n                startRow = currentActive.row - 1;\r\n                break;\r\n            case 2:\r\n                startRow = currentActive.row - 2;\r\n                break;\r\n            default:\r\n                startRow = -1;\r\n                break;\r\n        }\r\n\r\n        switch (currentActive.column % 3){\r\n            case 0:\r\n                startColumn = currentActive.column;\r\n                break;\r\n            case 1:\r\n                startColumn = currentActive.column - 1;\r\n                break;\r\n            case 2:\r\n                startColumn = currentActive.column - 2;\r\n                break;\r\n            default:\r\n                startColumn = -1;\r\n                break;\r\n        }\r\n\r\n        for(let r = 0; r < 3; r++){\r\n            for(let c = 0; c < 3; c++){\r\n                let row = startRow + r;\r\n                let column = startColumn + c;\r\n                if(row === currentActive.row || column === currentActive.column)\r\n                    continue;\r\n\r\n                if((sudoku[row][column].prefilled && \r\n                    sudoku[row][column].digit === currentGrid.guess) || \r\n                    (!sudoku[row][column].prefilled &&\r\n                        sudoku[row][column].guess === currentGrid.guess)){\r\n                        currentGrid.conflicts.push({row, column});\r\n                        sudoku[row][column].conflicts.push(currentActive);\r\n                    }\r\n            }\r\n        }\r\n\r\n        return {sudoku, currentGrid};\r\n    }\r\n\r\n    checkConflict = ()=>{\r\n        let sudoku = [...this.state.sudoku];\r\n        let currentActive = {...this.state.currentActive};\r\n        let currentGrid = {...sudoku[currentActive.row][currentActive.column]};\r\n\r\n        sudoku = this.updateConflicts(sudoku, currentActive, currentGrid);\r\n\r\n        // reset conflicts for new input\r\n        currentGrid.conflicts = [];\r\n\r\n        //row\r\n        ({sudoku, currentGrid} = this.checkRowConflicts(sudoku, currentActive, currentGrid));\r\n\r\n        //column\r\n        ({sudoku, currentGrid} = this.checkColumnConflicts(sudoku, currentActive, currentGrid));\r\n\r\n        //nonet\r\n        ({sudoku, currentGrid} = this.checkNonetConflicts(sudoku, currentActive, currentGrid));\r\n\r\n        sudoku[currentActive.row][currentActive.column] = {...currentGrid};\r\n        this.setState({sudoku});\r\n    }\r\n\r\n    newGame = ()=>{\r\n        let solvedSudoku = sudokuGenerator();\r\n        let sudoku = solvedSudoku.map((row, r)=>{\r\n            return row.map((n, c)=>{\r\n                return {\r\n                    digit: n,\r\n                    guess: 0,\r\n                    prefilled: true,\r\n                    conflicts: [],\r\n                    active: false,\r\n                    row: r,\r\n                    column: c\r\n                };\r\n            });\r\n        });\r\n\r\n        sudoku = this.removeNumbers(sudoku);\r\n\r\n        this.setState({\r\n            sudoku, \r\n            currentActive : {\r\n                row: -1,\r\n                column: -1\r\n            },\r\n            revealed: false\r\n        });\r\n    }\r\n\r\n    revealAll = ()=>{\r\n        this.setState({revealed: true});\r\n    }\r\n\r\n    backToYourAnswer = ()=>{\r\n        this.setState({revealed: false});\r\n    }\r\n\r\n    restart = ()=>{\r\n        let sudoku = [...this.state.sudoku];\r\n\r\n        sudoku = sudoku.map(r=>{\r\n            return r.map(n=>{\r\n                n.conflicts = [];\r\n                n.guess = 0;\r\n                return n;\r\n            });\r\n        });\r\n        \r\n        this.setState({sudoku});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id='game'>\r\n                <Toolbar \r\n                    newGame={this.newGame} \r\n                    revealAll={this.revealAll} \r\n                    backToYourAnswer={this.backToYourAnswer}\r\n                    revealed={this.state.revealed}\r\n                    restart={this.restart}\r\n                />\r\n                <div id=\"gameboard\">\r\n                    <table>\r\n                        <tbody>\r\n                            {this.state.sudoku.map((row, i)=>(\r\n                                <tr key={i}>\r\n                                    {row.map((n)=>(\r\n                                        <Grid \r\n                                            key={`${n.row}${n.column}`} \r\n                                            n={n} \r\n                                            toggleClass={this.toggleClass}\r\n                                            revealed={this.state.revealed}\r\n                                        />\r\n                                    ))}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <InputOptions \r\n                        guess={this.state.currentActive.row!==-1 ? \r\n                            this.state.sudoku[this.state.currentActive.row][this.state.currentActive.column].guess : 0}\r\n                        currentActive={this.state.currentActive} \r\n                        handleInputNum={this.handleInputNumClick}\r\n                        revealed={this.state.revealed}\r\n                    />\r\n                </div>\r\n                {/* <Toolbar \r\n                    newGame={this.newGame} \r\n                    revealAll={this.revealAll} \r\n                    backToYourAnswer={this.backToYourAnswer}\r\n                    revealed={this.state.revealed}\r\n                    restart={this.restart}\r\n                /> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameBoard;","import React from \"react\";\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div id='instruction'>\r\n            <h3><u>Classic Sudoku Rules</u></h3>\r\n            <p>\r\n                There are 9 rows, 9 columns, and 9 3x3 blocks. \r\n                Fill in the empty cells with the numbers 1-9, without repeating any numbers within the row, column, or block.\r\n            </p>\r\n            <h3><u>How to Play</u></h3>\r\n            <p>\r\n                Click on each empty cell, enter digit with keyboard or number bar that's provided. \r\n                Use Backspace or Delete to clear entries.\r\n            </p>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport default ()=>{\r\n    return (\r\n        <div id='footer'>\r\n            Web Sudoku &copy;2019&nbsp;\r\n            <a title=\"Github\" href=\"https://github.com/huwu55/Web-Sudoku\" target=\"_blank\">\r\n                Huiling Wu <i className=\"fab fa-github\"></i>\r\n            </a>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./style/style.css\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));","import React from \"react\";\r\n// import sudokuGenerator from './sudokuGenerator';\r\nimport GameBoard from './components/GameBoard';\r\nimport Instruction from './components/Instruction';\r\n// import Toolbar from './components/Toolbar';\r\nimport Footer from './components/Footer';\r\nimport \"./style/style.css\";\r\n\r\n\r\n// class Sudoku extends React.Component {\r\n//     constructor(){\r\n//         super();\r\n\r\n//         // let solvedSudoku = sudokuGenerator();\r\n\r\n//         // this.state = {\r\n//         //     solvedSudoku,\r\n//         //     revealAll: false\r\n//         // }\r\n//     }\r\n\r\n//     // newGame = ()=>{\r\n//     //     // console.log(\"hello\");\r\n//     //     let solvedSudoku = sudokuGenerator();\r\n//     //     this.setState({solvedSudoku});\r\n//     //     console.log(solvedSudoku);\r\n//     // }\r\n\r\n//     // revealAll = ()=>{}\r\n\r\n//     render(){\r\n//         return(\r\n//             <div id='app'>\r\n//                 <Instruction />\r\n//                 <GameBoard />\r\n//                 {/* <Toolbar newGame={this.newGame} /> */}\r\n//             </div>\r\n//         );\r\n//     }\r\n\r\n// }\r\n\r\n// export default Sudoku;\r\n\r\n\r\nexport default ()=>{\r\n    return (\r\n        <div id='app'>\r\n            <Instruction />\r\n            <GameBoard />\r\n            <Footer/>\r\n        </div>\r\n    );\r\n}"],"sourceRoot":""}